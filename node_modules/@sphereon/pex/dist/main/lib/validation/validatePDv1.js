"use strict";
module.exports = validate42;
module.exports.default = validate42;
const schema12 = { "$schema": "http://json-schema.org/draft-07/schema#", "title": "Presentation Definition", "definitions": { "schema": { "type": "object", "properties": { "uri": { "type": "string" }, "required": { "type": "boolean" } }, "required": ["uri"], "additionalProperties": false }, "issuance": { "type": "object", "properties": { "manifest": { "type": "string" } }, "additionalProperties": true }, "filter": { "type": "object", "properties": { "type": { "type": "string" }, "format": { "type": "string" }, "pattern": { "type": "string" }, "minimum": { "type": ["number", "string"] }, "minLength": { "type": "integer" }, "maxLength": { "type": "integer" }, "exclusiveMinimum": { "type": ["number", "string"] }, "exclusiveMaximum": { "type": ["number", "string"] }, "maximum": { "type": ["number", "string"] }, "const": { "type": ["number", "string"] }, "enum": { "type": "array", "items": { "type": ["number", "string"] } }, "not": { "type": "object", "minProperties": 1 } }, "required": ["type"], "additionalProperties": false }, "format": { "type": "object", "patternProperties": { "^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$": { "type": "object", "properties": { "alg": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["alg"], "additionalProperties": false }, "^ldp_vc$|^ldp_vp$|^ldp$": { "type": "object", "properties": { "proof_type": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["proof_type"], "additionalProperties": false }, "additionalProperties": false }, "additionalProperties": false }, "submission_requirements": { "type": "object", "oneOf": [{ "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from": { "type": "string" } }, "required": ["rule", "from"], "additionalProperties": false }, { "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from_nested": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/submission_requirements" } } }, "required": ["rule", "from_nested"], "additionalProperties": false }] }, "input_descriptors": { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "purpose": { "type": "string" }, "group": { "type": "array", "items": { "type": "string" } }, "schema": { "type": "array", "items": { "$ref": "#/definitions/schema" } }, "issuance": { "type": "array", "items": { "$ref": "#/definitions/issuance" } }, "constraints": { "type": "object", "properties": { "limit_disclosure": { "type": "string", "enum": ["required", "preferred"] }, "statuses": { "type": "object", "properties": { "active": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "suspended": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "revoked": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } } } }, "fields": { "type": "array", "items": { "$ref": "#/definitions/field" } }, "subject_is_issuer": { "type": "string", "enum": ["required", "preferred"] }, "is_holder": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } }, "same_subject": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } } }, "additionalProperties": false } }, "required": ["id", "schema"], "additionalProperties": false }, "field": { "type": "object", "oneOf": [{ "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "filter": { "$ref": "#/definitions/filter" } }, "required": ["path"], "additionalProperties": false }, { "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "filter": { "$ref": "#/definitions/filter" }, "predicate": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["path", "filter", "predicate"], "additionalProperties": false }] } }, "type": "object", "properties": { "presentation_definition": { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "purpose": { "type": "string" }, "format": { "$ref": "#/definitions/format" }, "submission_requirements": { "type": "array", "items": { "$ref": "#/definitions/submission_requirements" } }, "input_descriptors": { "type": "array", "items": { "$ref": "#/definitions/input_descriptors" } } }, "required": ["id", "input_descriptors"], "additionalProperties": false } } };
const schema13 = { "type": "object", "patternProperties": { "^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$": { "type": "object", "properties": { "alg": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["alg"], "additionalProperties": false }, "^ldp_vc$|^ldp_vp$|^ldp$": { "type": "object", "properties": { "proof_type": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["proof_type"], "additionalProperties": false }, "additionalProperties": false }, "additionalProperties": false };
const pattern0 = new RegExp("^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$", "u");
const pattern1 = new RegExp("^ldp_vc$|^ldp_vp$|^ldp$", "u");
const pattern2 = new RegExp("additionalProperties", "u");
function validate43(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    for (const key0 in data) {
        if (!(((pattern0.test(key0)) || (pattern1.test(key0))) || (pattern2.test(key0)))) {
            const err0 = { instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema13, data };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
    for (const key1 in data) {
        if (pattern0.test(key1)) {
            let data0 = data[key1];
            if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                if (data0.alg === undefined) {
                    const err1 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24/required", keyword: "required", params: { missingProperty: "alg" }, message: "must have required property '" + "alg" + "'", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"].required, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"], data: data0 };
                    if (vErrors === null) {
                        vErrors = [err1];
                    }
                    else {
                        vErrors.push(err1);
                    }
                    errors++;
                }
                for (const key2 in data0) {
                    if (!(key2 === "alg")) {
                        const err2 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties", schema: false, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"], data: data0 };
                        if (vErrors === null) {
                            vErrors = [err2];
                        }
                        else {
                            vErrors.push(err2);
                        }
                        errors++;
                    }
                }
                if (data0.alg !== undefined) {
                    let data1 = data0.alg;
                    if (Array.isArray(data1)) {
                        if (data1.length < 1) {
                            const err3 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/alg", schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24/properties/alg/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"].properties.alg, data: data1 };
                            if (vErrors === null) {
                                vErrors = [err3];
                            }
                            else {
                                vErrors.push(err3);
                            }
                            errors++;
                        }
                        const len0 = data1.length;
                        for (let i0 = 0; i0 < len0; i0++) {
                            let data2 = data1[i0];
                            if (typeof data2 !== "string") {
                                const err4 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/alg/" + i0, schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24/properties/alg/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"].properties.alg.items.type, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"].properties.alg.items, data: data2 };
                                if (vErrors === null) {
                                    vErrors = [err4];
                                }
                                else {
                                    vErrors.push(err4);
                                }
                                errors++;
                            }
                        }
                    }
                    else {
                        const err5 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/alg", schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24/properties/alg/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"].properties.alg.type, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"].properties.alg, data: data1 };
                        if (vErrors === null) {
                            vErrors = [err5];
                        }
                        else {
                            vErrors.push(err5);
                        }
                        errors++;
                    }
                }
            }
            else {
                const err6 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"].type, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$"], data: data0 };
                if (vErrors === null) {
                    vErrors = [err6];
                }
                else {
                    vErrors.push(err6);
                }
                errors++;
            }
        }
    }
    for (const key3 in data) {
        if (pattern1.test(key3)) {
            let data3 = data[key3];
            if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                if (data3.proof_type === undefined) {
                    const err7 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/required", keyword: "required", params: { missingProperty: "proof_type" }, message: "must have required property '" + "proof_type" + "'", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].required, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"], data: data3 };
                    if (vErrors === null) {
                        vErrors = [err7];
                    }
                    else {
                        vErrors.push(err7);
                    }
                    errors++;
                }
                for (const key4 in data3) {
                    if (!(key4 === "proof_type")) {
                        const err8 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties", schema: false, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"], data: data3 };
                        if (vErrors === null) {
                            vErrors = [err8];
                        }
                        else {
                            vErrors.push(err8);
                        }
                        errors++;
                    }
                }
                if (data3.proof_type !== undefined) {
                    let data4 = data3.proof_type;
                    if (Array.isArray(data4)) {
                        if (data4.length < 1) {
                            const err9 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/proof_type", schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/properties/proof_type/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type, data: data4 };
                            if (vErrors === null) {
                                vErrors = [err9];
                            }
                            else {
                                vErrors.push(err9);
                            }
                            errors++;
                        }
                        const len1 = data4.length;
                        for (let i1 = 0; i1 < len1; i1++) {
                            let data5 = data4[i1];
                            if (typeof data5 !== "string") {
                                const err10 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/proof_type/" + i1, schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/properties/proof_type/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type.items.type, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type.items, data: data5 };
                                if (vErrors === null) {
                                    vErrors = [err10];
                                }
                                else {
                                    vErrors.push(err10);
                                }
                                errors++;
                            }
                        }
                    }
                    else {
                        const err11 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/proof_type", schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/properties/proof_type/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type.type, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type, data: data4 };
                        if (vErrors === null) {
                            vErrors = [err11];
                        }
                        else {
                            vErrors.push(err11);
                        }
                        errors++;
                    }
                }
            }
            else {
                const err12 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].type, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"], data: data3 };
                if (vErrors === null) {
                    vErrors = [err12];
                }
                else {
                    vErrors.push(err12);
                }
                errors++;
            }
        }
    }
    for (const key5 in data) {
        if (pattern2.test(key5)) {
            const err13 = { instancePath: instancePath + "/" + key5.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false", schema: false, parentSchema: schema13.patternProperties.additionalProperties, data: data[key5] };
            if (vErrors === null) {
                vErrors = [err13];
            }
            else {
                vErrors.push(err13);
            }
            errors++;
        }
    }
}
else {
    const err14 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema13.type, parentSchema: schema13, data };
    if (vErrors === null) {
        vErrors = [err14];
    }
    else {
        vErrors.push(err14);
    }
    errors++;
} validate43.errors = vErrors; return errors === 0; }
const schema14 = { "type": "object", "oneOf": [{ "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from": { "type": "string" } }, "required": ["rule", "from"], "additionalProperties": false }, { "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from_nested": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/submission_requirements" } } }, "required": ["rule", "from_nested"], "additionalProperties": false }] };
const wrapper0 = { validate: validate45 };
function validate45(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    const err0 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema14.type, parentSchema: schema14, data };
    if (vErrors === null) {
        vErrors = [err0];
    }
    else {
        vErrors.push(err0);
    }
    errors++;
} const _errs1 = errors; let valid0 = false; let passing0 = null; const _errs2 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.rule === undefined) {
        const err1 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: "rule" }, message: "must have required property '" + "rule" + "'", schema: schema14.oneOf[0].required, parentSchema: schema14.oneOf[0], data };
        if (vErrors === null) {
            vErrors = [err1];
        }
        else {
            vErrors.push(err1);
        }
        errors++;
    }
    if (data.from === undefined) {
        const err2 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: "from" }, message: "must have required property '" + "from" + "'", schema: schema14.oneOf[0].required, parentSchema: schema14.oneOf[0], data };
        if (vErrors === null) {
            vErrors = [err2];
        }
        else {
            vErrors.push(err2);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!(((((((key0 === "name") || (key0 === "purpose")) || (key0 === "rule")) || (key0 === "count")) || (key0 === "min")) || (key0 === "max")) || (key0 === "from"))) {
            const err3 = { instancePath, schemaPath: "#/oneOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema14.oneOf[0], data };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.name !== undefined) {
        let data0 = data.name;
        if (typeof data0 !== "string") {
            const err4 = { instancePath: instancePath + "/name", schemaPath: "#/oneOf/0/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.name.type, parentSchema: schema14.oneOf[0].properties.name, data: data0 };
            if (vErrors === null) {
                vErrors = [err4];
            }
            else {
                vErrors.push(err4);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data1 = data.purpose;
        if (typeof data1 !== "string") {
            const err5 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/0/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.purpose.type, parentSchema: schema14.oneOf[0].properties.purpose, data: data1 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.rule !== undefined) {
        let data2 = data.rule;
        if (typeof data2 !== "string") {
            const err6 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/0/properties/rule/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.rule.type, parentSchema: schema14.oneOf[0].properties.rule, data: data2 };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
        if (!((data2 === "all") || (data2 === "pick"))) {
            const err7 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/0/properties/rule/enum", keyword: "enum", params: { allowedValues: schema14.oneOf[0].properties.rule.enum }, message: "must be equal to one of the allowed values", schema: schema14.oneOf[0].properties.rule.enum, parentSchema: schema14.oneOf[0].properties.rule, data: data2 };
            if (vErrors === null) {
                vErrors = [err7];
            }
            else {
                vErrors.push(err7);
            }
            errors++;
        }
    }
    if (data.count !== undefined) {
        let data3 = data.count;
        if (!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))) {
            const err8 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/0/properties/count/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[0].properties.count.type, parentSchema: schema14.oneOf[0].properties.count, data: data3 };
            if (vErrors === null) {
                vErrors = [err8];
            }
            else {
                vErrors.push(err8);
            }
            errors++;
        }
        if (typeof data3 == "number") {
            if (data3 < 1 || isNaN(data3)) {
                const err9 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/0/properties/count/minimum", keyword: "minimum", params: { comparison: ">=", limit: 1 }, message: "must be >= 1", schema: 1, parentSchema: schema14.oneOf[0].properties.count, data: data3 };
                if (vErrors === null) {
                    vErrors = [err9];
                }
                else {
                    vErrors.push(err9);
                }
                errors++;
            }
        }
    }
    if (data.min !== undefined) {
        let data4 = data.min;
        if (!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))) {
            const err10 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/0/properties/min/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[0].properties.min.type, parentSchema: schema14.oneOf[0].properties.min, data: data4 };
            if (vErrors === null) {
                vErrors = [err10];
            }
            else {
                vErrors.push(err10);
            }
            errors++;
        }
        if (typeof data4 == "number") {
            if (data4 < 0 || isNaN(data4)) {
                const err11 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/0/properties/min/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[0].properties.min, data: data4 };
                if (vErrors === null) {
                    vErrors = [err11];
                }
                else {
                    vErrors.push(err11);
                }
                errors++;
            }
        }
    }
    if (data.max !== undefined) {
        let data5 = data.max;
        if (!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))) {
            const err12 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/0/properties/max/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[0].properties.max.type, parentSchema: schema14.oneOf[0].properties.max, data: data5 };
            if (vErrors === null) {
                vErrors = [err12];
            }
            else {
                vErrors.push(err12);
            }
            errors++;
        }
        if (typeof data5 == "number") {
            if (data5 < 0 || isNaN(data5)) {
                const err13 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/0/properties/max/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[0].properties.max, data: data5 };
                if (vErrors === null) {
                    vErrors = [err13];
                }
                else {
                    vErrors.push(err13);
                }
                errors++;
            }
        }
    }
    if (data.from !== undefined) {
        let data6 = data.from;
        if (typeof data6 !== "string") {
            const err14 = { instancePath: instancePath + "/from", schemaPath: "#/oneOf/0/properties/from/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.from.type, parentSchema: schema14.oneOf[0].properties.from, data: data6 };
            if (vErrors === null) {
                vErrors = [err14];
            }
            else {
                vErrors.push(err14);
            }
            errors++;
        }
    }
} var _valid0 = _errs2 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs18 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.rule === undefined) {
        const err15 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "rule" }, message: "must have required property '" + "rule" + "'", schema: schema14.oneOf[1].required, parentSchema: schema14.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err15];
        }
        else {
            vErrors.push(err15);
        }
        errors++;
    }
    if (data.from_nested === undefined) {
        const err16 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "from_nested" }, message: "must have required property '" + "from_nested" + "'", schema: schema14.oneOf[1].required, parentSchema: schema14.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err16];
        }
        else {
            vErrors.push(err16);
        }
        errors++;
    }
    for (const key1 in data) {
        if (!(((((((key1 === "name") || (key1 === "purpose")) || (key1 === "rule")) || (key1 === "count")) || (key1 === "min")) || (key1 === "max")) || (key1 === "from_nested"))) {
            const err17 = { instancePath, schemaPath: "#/oneOf/1/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties", schema: false, parentSchema: schema14.oneOf[1], data };
            if (vErrors === null) {
                vErrors = [err17];
            }
            else {
                vErrors.push(err17);
            }
            errors++;
        }
    }
    if (data.name !== undefined) {
        let data7 = data.name;
        if (typeof data7 !== "string") {
            const err18 = { instancePath: instancePath + "/name", schemaPath: "#/oneOf/1/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[1].properties.name.type, parentSchema: schema14.oneOf[1].properties.name, data: data7 };
            if (vErrors === null) {
                vErrors = [err18];
            }
            else {
                vErrors.push(err18);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data8 = data.purpose;
        if (typeof data8 !== "string") {
            const err19 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/1/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[1].properties.purpose.type, parentSchema: schema14.oneOf[1].properties.purpose, data: data8 };
            if (vErrors === null) {
                vErrors = [err19];
            }
            else {
                vErrors.push(err19);
            }
            errors++;
        }
    }
    if (data.rule !== undefined) {
        let data9 = data.rule;
        if (typeof data9 !== "string") {
            const err20 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/1/properties/rule/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[1].properties.rule.type, parentSchema: schema14.oneOf[1].properties.rule, data: data9 };
            if (vErrors === null) {
                vErrors = [err20];
            }
            else {
                vErrors.push(err20);
            }
            errors++;
        }
        if (!((data9 === "all") || (data9 === "pick"))) {
            const err21 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/1/properties/rule/enum", keyword: "enum", params: { allowedValues: schema14.oneOf[1].properties.rule.enum }, message: "must be equal to one of the allowed values", schema: schema14.oneOf[1].properties.rule.enum, parentSchema: schema14.oneOf[1].properties.rule, data: data9 };
            if (vErrors === null) {
                vErrors = [err21];
            }
            else {
                vErrors.push(err21);
            }
            errors++;
        }
    }
    if (data.count !== undefined) {
        let data10 = data.count;
        if (!((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10)))) {
            const err22 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/1/properties/count/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[1].properties.count.type, parentSchema: schema14.oneOf[1].properties.count, data: data10 };
            if (vErrors === null) {
                vErrors = [err22];
            }
            else {
                vErrors.push(err22);
            }
            errors++;
        }
        if (typeof data10 == "number") {
            if (data10 < 1 || isNaN(data10)) {
                const err23 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/1/properties/count/minimum", keyword: "minimum", params: { comparison: ">=", limit: 1 }, message: "must be >= 1", schema: 1, parentSchema: schema14.oneOf[1].properties.count, data: data10 };
                if (vErrors === null) {
                    vErrors = [err23];
                }
                else {
                    vErrors.push(err23);
                }
                errors++;
            }
        }
    }
    if (data.min !== undefined) {
        let data11 = data.min;
        if (!((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11)))) {
            const err24 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/1/properties/min/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[1].properties.min.type, parentSchema: schema14.oneOf[1].properties.min, data: data11 };
            if (vErrors === null) {
                vErrors = [err24];
            }
            else {
                vErrors.push(err24);
            }
            errors++;
        }
        if (typeof data11 == "number") {
            if (data11 < 0 || isNaN(data11)) {
                const err25 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/1/properties/min/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[1].properties.min, data: data11 };
                if (vErrors === null) {
                    vErrors = [err25];
                }
                else {
                    vErrors.push(err25);
                }
                errors++;
            }
        }
    }
    if (data.max !== undefined) {
        let data12 = data.max;
        if (!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))) {
            const err26 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/1/properties/max/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[1].properties.max.type, parentSchema: schema14.oneOf[1].properties.max, data: data12 };
            if (vErrors === null) {
                vErrors = [err26];
            }
            else {
                vErrors.push(err26);
            }
            errors++;
        }
        if (typeof data12 == "number") {
            if (data12 < 0 || isNaN(data12)) {
                const err27 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/1/properties/max/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[1].properties.max, data: data12 };
                if (vErrors === null) {
                    vErrors = [err27];
                }
                else {
                    vErrors.push(err27);
                }
                errors++;
            }
        }
    }
    if (data.from_nested !== undefined) {
        let data13 = data.from_nested;
        if (Array.isArray(data13)) {
            if (data13.length < 1) {
                const err28 = { instancePath: instancePath + "/from_nested", schemaPath: "#/oneOf/1/properties/from_nested/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema14.oneOf[1].properties.from_nested, data: data13 };
                if (vErrors === null) {
                    vErrors = [err28];
                }
                else {
                    vErrors.push(err28);
                }
                errors++;
            }
            const len0 = data13.length;
            for (let i0 = 0; i0 < len0; i0++) {
                if (!(wrapper0.validate(data13[i0], { instancePath: instancePath + "/from_nested/" + i0, parentData: data13, parentDataProperty: i0, rootData }))) {
                    vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err29 = { instancePath: instancePath + "/from_nested", schemaPath: "#/oneOf/1/properties/from_nested/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema14.oneOf[1].properties.from_nested.type, parentSchema: schema14.oneOf[1].properties.from_nested, data: data13 };
            if (vErrors === null) {
                vErrors = [err29];
            }
            else {
                vErrors.push(err29);
            }
            errors++;
        }
    }
} var _valid0 = _errs18 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err30 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf", schema: schema14.oneOf, parentSchema: schema14, data };
    if (vErrors === null) {
        vErrors = [err30];
    }
    else {
        vErrors.push(err30);
    }
    errors++;
}
else {
    errors = _errs1;
    if (vErrors !== null) {
        if (_errs1) {
            vErrors.length = _errs1;
        }
        else {
            vErrors = null;
        }
    }
} validate45.errors = vErrors; return errors === 0; }
const schema15 = { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "purpose": { "type": "string" }, "group": { "type": "array", "items": { "type": "string" } }, "schema": { "type": "array", "items": { "$ref": "#/definitions/schema" } }, "issuance": { "type": "array", "items": { "$ref": "#/definitions/issuance" } }, "constraints": { "type": "object", "properties": { "limit_disclosure": { "type": "string", "enum": ["required", "preferred"] }, "statuses": { "type": "object", "properties": { "active": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "suspended": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "revoked": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } } } }, "fields": { "type": "array", "items": { "$ref": "#/definitions/field" } }, "subject_is_issuer": { "type": "string", "enum": ["required", "preferred"] }, "is_holder": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } }, "same_subject": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } } }, "additionalProperties": false } }, "required": ["id", "schema"], "additionalProperties": false };
const schema16 = { "type": "object", "properties": { "uri": { "type": "string" }, "required": { "type": "boolean" } }, "required": ["uri"], "additionalProperties": false };
function validate48(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.uri === undefined) {
        const err0 = { instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: "uri" }, message: "must have required property '" + "uri" + "'", schema: schema16.required, parentSchema: schema16, data };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!((key0 === "uri") || (key0 === "required"))) {
            const err1 = { instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema16, data };
            if (vErrors === null) {
                vErrors = [err1];
            }
            else {
                vErrors.push(err1);
            }
            errors++;
        }
    }
    if (data.uri !== undefined) {
        let data0 = data.uri;
        if (typeof data0 !== "string") {
            const err2 = { instancePath: instancePath + "/uri", schemaPath: "#/properties/uri/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema16.properties.uri.type, parentSchema: schema16.properties.uri, data: data0 };
            if (vErrors === null) {
                vErrors = [err2];
            }
            else {
                vErrors.push(err2);
            }
            errors++;
        }
    }
    if (data.required !== undefined) {
        let data1 = data.required;
        if (typeof data1 !== "boolean") {
            const err3 = { instancePath: instancePath + "/required", schemaPath: "#/properties/required/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean", schema: schema16.properties.required.type, parentSchema: schema16.properties.required, data: data1 };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
}
else {
    const err4 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema16.type, parentSchema: schema16, data };
    if (vErrors === null) {
        vErrors = [err4];
    }
    else {
        vErrors.push(err4);
    }
    errors++;
} validate48.errors = vErrors; return errors === 0; }
const schema17 = { "type": "object", "properties": { "manifest": { "type": "string" } }, "additionalProperties": true };
function validate50(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.manifest !== undefined) {
        let data0 = data.manifest;
        if (typeof data0 !== "string") {
            const err0 = { instancePath: instancePath + "/manifest", schemaPath: "#/properties/manifest/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.properties.manifest.type, parentSchema: schema17.properties.manifest, data: data0 };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
}
else {
    const err1 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema17.type, parentSchema: schema17, data };
    if (vErrors === null) {
        vErrors = [err1];
    }
    else {
        vErrors.push(err1);
    }
    errors++;
} validate50.errors = vErrors; return errors === 0; }
const schema18 = { "type": "object", "oneOf": [{ "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "filter": { "$ref": "#/definitions/filter" } }, "required": ["path"], "additionalProperties": false }, { "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "filter": { "$ref": "#/definitions/filter" }, "predicate": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["path", "filter", "predicate"], "additionalProperties": false }] };
const schema19 = { "type": "object", "properties": { "type": { "type": "string" }, "format": { "type": "string" }, "pattern": { "type": "string" }, "minimum": { "type": ["number", "string"] }, "minLength": { "type": "integer" }, "maxLength": { "type": "integer" }, "exclusiveMinimum": { "type": ["number", "string"] }, "exclusiveMaximum": { "type": ["number", "string"] }, "maximum": { "type": ["number", "string"] }, "const": { "type": ["number", "string"] }, "enum": { "type": "array", "items": { "type": ["number", "string"] } }, "not": { "type": "object", "minProperties": 1 } }, "required": ["type"], "additionalProperties": false };
const func4 = Object.prototype.hasOwnProperty;
function validate53(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.type === undefined) {
        const err0 = { instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: "type" }, message: "must have required property '" + "type" + "'", schema: schema19.required, parentSchema: schema19, data };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!(func4.call(schema19.properties, key0))) {
            const err1 = { instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema19, data };
            if (vErrors === null) {
                vErrors = [err1];
            }
            else {
                vErrors.push(err1);
            }
            errors++;
        }
    }
    if (data.type !== undefined) {
        let data0 = data.type;
        if (typeof data0 !== "string") {
            const err2 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema19.properties.type.type, parentSchema: schema19.properties.type, data: data0 };
            if (vErrors === null) {
                vErrors = [err2];
            }
            else {
                vErrors.push(err2);
            }
            errors++;
        }
    }
    if (data.format !== undefined) {
        let data1 = data.format;
        if (typeof data1 !== "string") {
            const err3 = { instancePath: instancePath + "/format", schemaPath: "#/properties/format/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema19.properties.format.type, parentSchema: schema19.properties.format, data: data1 };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.pattern !== undefined) {
        let data2 = data.pattern;
        if (typeof data2 !== "string") {
            const err4 = { instancePath: instancePath + "/pattern", schemaPath: "#/properties/pattern/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema19.properties.pattern.type, parentSchema: schema19.properties.pattern, data: data2 };
            if (vErrors === null) {
                vErrors = [err4];
            }
            else {
                vErrors.push(err4);
            }
            errors++;
        }
    }
    if (data.minimum !== undefined) {
        let data3 = data.minimum;
        if ((!(typeof data3 == "number")) && (typeof data3 !== "string")) {
            const err5 = { instancePath: instancePath + "/minimum", schemaPath: "#/properties/minimum/type", keyword: "type", params: { type: schema19.properties.minimum.type }, message: "must be number,string", schema: schema19.properties.minimum.type, parentSchema: schema19.properties.minimum, data: data3 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.minLength !== undefined) {
        let data4 = data.minLength;
        if (!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))) {
            const err6 = { instancePath: instancePath + "/minLength", schemaPath: "#/properties/minLength/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema19.properties.minLength.type, parentSchema: schema19.properties.minLength, data: data4 };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
    }
    if (data.maxLength !== undefined) {
        let data5 = data.maxLength;
        if (!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))) {
            const err7 = { instancePath: instancePath + "/maxLength", schemaPath: "#/properties/maxLength/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema19.properties.maxLength.type, parentSchema: schema19.properties.maxLength, data: data5 };
            if (vErrors === null) {
                vErrors = [err7];
            }
            else {
                vErrors.push(err7);
            }
            errors++;
        }
    }
    if (data.exclusiveMinimum !== undefined) {
        let data6 = data.exclusiveMinimum;
        if ((!(typeof data6 == "number")) && (typeof data6 !== "string")) {
            const err8 = { instancePath: instancePath + "/exclusiveMinimum", schemaPath: "#/properties/exclusiveMinimum/type", keyword: "type", params: { type: schema19.properties.exclusiveMinimum.type }, message: "must be number,string", schema: schema19.properties.exclusiveMinimum.type, parentSchema: schema19.properties.exclusiveMinimum, data: data6 };
            if (vErrors === null) {
                vErrors = [err8];
            }
            else {
                vErrors.push(err8);
            }
            errors++;
        }
    }
    if (data.exclusiveMaximum !== undefined) {
        let data7 = data.exclusiveMaximum;
        if ((!(typeof data7 == "number")) && (typeof data7 !== "string")) {
            const err9 = { instancePath: instancePath + "/exclusiveMaximum", schemaPath: "#/properties/exclusiveMaximum/type", keyword: "type", params: { type: schema19.properties.exclusiveMaximum.type }, message: "must be number,string", schema: schema19.properties.exclusiveMaximum.type, parentSchema: schema19.properties.exclusiveMaximum, data: data7 };
            if (vErrors === null) {
                vErrors = [err9];
            }
            else {
                vErrors.push(err9);
            }
            errors++;
        }
    }
    if (data.maximum !== undefined) {
        let data8 = data.maximum;
        if ((!(typeof data8 == "number")) && (typeof data8 !== "string")) {
            const err10 = { instancePath: instancePath + "/maximum", schemaPath: "#/properties/maximum/type", keyword: "type", params: { type: schema19.properties.maximum.type }, message: "must be number,string", schema: schema19.properties.maximum.type, parentSchema: schema19.properties.maximum, data: data8 };
            if (vErrors === null) {
                vErrors = [err10];
            }
            else {
                vErrors.push(err10);
            }
            errors++;
        }
    }
    if (data.const !== undefined) {
        let data9 = data.const;
        if ((!(typeof data9 == "number")) && (typeof data9 !== "string")) {
            const err11 = { instancePath: instancePath + "/const", schemaPath: "#/properties/const/type", keyword: "type", params: { type: schema19.properties.const.type }, message: "must be number,string", schema: schema19.properties.const.type, parentSchema: schema19.properties.const, data: data9 };
            if (vErrors === null) {
                vErrors = [err11];
            }
            else {
                vErrors.push(err11);
            }
            errors++;
        }
    }
    if (data.enum !== undefined) {
        let data10 = data.enum;
        if (Array.isArray(data10)) {
            const len0 = data10.length;
            for (let i0 = 0; i0 < len0; i0++) {
                let data11 = data10[i0];
                if ((!(typeof data11 == "number")) && (typeof data11 !== "string")) {
                    const err12 = { instancePath: instancePath + "/enum/" + i0, schemaPath: "#/properties/enum/items/type", keyword: "type", params: { type: schema19.properties.enum.items.type }, message: "must be number,string", schema: schema19.properties.enum.items.type, parentSchema: schema19.properties.enum.items, data: data11 };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
            }
        }
        else {
            const err13 = { instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema19.properties.enum.type, parentSchema: schema19.properties.enum, data: data10 };
            if (vErrors === null) {
                vErrors = [err13];
            }
            else {
                vErrors.push(err13);
            }
            errors++;
        }
    }
    if (data.not !== undefined) {
        let data12 = data.not;
        if (data12 && typeof data12 == "object" && !Array.isArray(data12)) {
            if (Object.keys(data12).length < 1) {
                const err14 = { instancePath: instancePath + "/not", schemaPath: "#/properties/not/minProperties", keyword: "minProperties", params: { limit: 1 }, message: "must NOT have fewer than 1 properties", schema: 1, parentSchema: schema19.properties.not, data: data12 };
                if (vErrors === null) {
                    vErrors = [err14];
                }
                else {
                    vErrors.push(err14);
                }
                errors++;
            }
        }
        else {
            const err15 = { instancePath: instancePath + "/not", schemaPath: "#/properties/not/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema19.properties.not.type, parentSchema: schema19.properties.not, data: data12 };
            if (vErrors === null) {
                vErrors = [err15];
            }
            else {
                vErrors.push(err15);
            }
            errors++;
        }
    }
}
else {
    const err16 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema19.type, parentSchema: schema19, data };
    if (vErrors === null) {
        vErrors = [err16];
    }
    else {
        vErrors.push(err16);
    }
    errors++;
} validate53.errors = vErrors; return errors === 0; }
function validate52(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    const err0 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema18.type, parentSchema: schema18, data };
    if (vErrors === null) {
        vErrors = [err0];
    }
    else {
        vErrors.push(err0);
    }
    errors++;
} const _errs1 = errors; let valid0 = false; let passing0 = null; const _errs2 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.path === undefined) {
        const err1 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: "path" }, message: "must have required property '" + "path" + "'", schema: schema18.oneOf[0].required, parentSchema: schema18.oneOf[0], data };
        if (vErrors === null) {
            vErrors = [err1];
        }
        else {
            vErrors.push(err1);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter"))) {
            const err2 = { instancePath, schemaPath: "#/oneOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema18.oneOf[0], data };
            if (vErrors === null) {
                vErrors = [err2];
            }
            else {
                vErrors.push(err2);
            }
            errors++;
        }
    }
    if (data.id !== undefined) {
        let data0 = data.id;
        if (typeof data0 !== "string") {
            const err3 = { instancePath: instancePath + "/id", schemaPath: "#/oneOf/0/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema18.oneOf[0].properties.id.type, parentSchema: schema18.oneOf[0].properties.id, data: data0 };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.path !== undefined) {
        let data1 = data.path;
        if (Array.isArray(data1)) {
            const len0 = data1.length;
            for (let i0 = 0; i0 < len0; i0++) {
                let data2 = data1[i0];
                if (typeof data2 !== "string") {
                    const err4 = { instancePath: instancePath + "/path/" + i0, schemaPath: "#/oneOf/0/properties/path/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema18.oneOf[0].properties.path.items.type, parentSchema: schema18.oneOf[0].properties.path.items, data: data2 };
                    if (vErrors === null) {
                        vErrors = [err4];
                    }
                    else {
                        vErrors.push(err4);
                    }
                    errors++;
                }
            }
        }
        else {
            const err5 = { instancePath: instancePath + "/path", schemaPath: "#/oneOf/0/properties/path/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema18.oneOf[0].properties.path.type, parentSchema: schema18.oneOf[0].properties.path, data: data1 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data3 = data.purpose;
        if (typeof data3 !== "string") {
            const err6 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/0/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema18.oneOf[0].properties.purpose.type, parentSchema: schema18.oneOf[0].properties.purpose, data: data3 };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
    }
    if (data.filter !== undefined) {
        if (!(validate53(data.filter, { instancePath: instancePath + "/filter", parentData: data, parentDataProperty: "filter", rootData }))) {
            vErrors = vErrors === null ? validate53.errors : vErrors.concat(validate53.errors);
            errors = vErrors.length;
        }
    }
} var _valid0 = _errs2 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs13 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.path === undefined) {
        const err7 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "path" }, message: "must have required property '" + "path" + "'", schema: schema18.oneOf[1].required, parentSchema: schema18.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err7];
        }
        else {
            vErrors.push(err7);
        }
        errors++;
    }
    if (data.filter === undefined) {
        const err8 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "filter" }, message: "must have required property '" + "filter" + "'", schema: schema18.oneOf[1].required, parentSchema: schema18.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err8];
        }
        else {
            vErrors.push(err8);
        }
        errors++;
    }
    if (data.predicate === undefined) {
        const err9 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "predicate" }, message: "must have required property '" + "predicate" + "'", schema: schema18.oneOf[1].required, parentSchema: schema18.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err9];
        }
        else {
            vErrors.push(err9);
        }
        errors++;
    }
    for (const key1 in data) {
        if (!(((((key1 === "id") || (key1 === "path")) || (key1 === "purpose")) || (key1 === "filter")) || (key1 === "predicate"))) {
            const err10 = { instancePath, schemaPath: "#/oneOf/1/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties", schema: false, parentSchema: schema18.oneOf[1], data };
            if (vErrors === null) {
                vErrors = [err10];
            }
            else {
                vErrors.push(err10);
            }
            errors++;
        }
    }
    if (data.id !== undefined) {
        let data5 = data.id;
        if (typeof data5 !== "string") {
            const err11 = { instancePath: instancePath + "/id", schemaPath: "#/oneOf/1/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema18.oneOf[1].properties.id.type, parentSchema: schema18.oneOf[1].properties.id, data: data5 };
            if (vErrors === null) {
                vErrors = [err11];
            }
            else {
                vErrors.push(err11);
            }
            errors++;
        }
    }
    if (data.path !== undefined) {
        let data6 = data.path;
        if (Array.isArray(data6)) {
            const len1 = data6.length;
            for (let i1 = 0; i1 < len1; i1++) {
                let data7 = data6[i1];
                if (typeof data7 !== "string") {
                    const err12 = { instancePath: instancePath + "/path/" + i1, schemaPath: "#/oneOf/1/properties/path/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema18.oneOf[1].properties.path.items.type, parentSchema: schema18.oneOf[1].properties.path.items, data: data7 };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
            }
        }
        else {
            const err13 = { instancePath: instancePath + "/path", schemaPath: "#/oneOf/1/properties/path/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema18.oneOf[1].properties.path.type, parentSchema: schema18.oneOf[1].properties.path, data: data6 };
            if (vErrors === null) {
                vErrors = [err13];
            }
            else {
                vErrors.push(err13);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data8 = data.purpose;
        if (typeof data8 !== "string") {
            const err14 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/1/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema18.oneOf[1].properties.purpose.type, parentSchema: schema18.oneOf[1].properties.purpose, data: data8 };
            if (vErrors === null) {
                vErrors = [err14];
            }
            else {
                vErrors.push(err14);
            }
            errors++;
        }
    }
    if (data.filter !== undefined) {
        if (!(validate53(data.filter, { instancePath: instancePath + "/filter", parentData: data, parentDataProperty: "filter", rootData }))) {
            vErrors = vErrors === null ? validate53.errors : vErrors.concat(validate53.errors);
            errors = vErrors.length;
        }
    }
    if (data.predicate !== undefined) {
        let data10 = data.predicate;
        if (typeof data10 !== "string") {
            const err15 = { instancePath: instancePath + "/predicate", schemaPath: "#/oneOf/1/properties/predicate/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema18.oneOf[1].properties.predicate.type, parentSchema: schema18.oneOf[1].properties.predicate, data: data10 };
            if (vErrors === null) {
                vErrors = [err15];
            }
            else {
                vErrors.push(err15);
            }
            errors++;
        }
        if (!((data10 === "required") || (data10 === "preferred"))) {
            const err16 = { instancePath: instancePath + "/predicate", schemaPath: "#/oneOf/1/properties/predicate/enum", keyword: "enum", params: { allowedValues: schema18.oneOf[1].properties.predicate.enum }, message: "must be equal to one of the allowed values", schema: schema18.oneOf[1].properties.predicate.enum, parentSchema: schema18.oneOf[1].properties.predicate, data: data10 };
            if (vErrors === null) {
                vErrors = [err16];
            }
            else {
                vErrors.push(err16);
            }
            errors++;
        }
    }
} var _valid0 = _errs13 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err17 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf", schema: schema18.oneOf, parentSchema: schema18, data };
    if (vErrors === null) {
        vErrors = [err17];
    }
    else {
        vErrors.push(err17);
    }
    errors++;
}
else {
    errors = _errs1;
    if (vErrors !== null) {
        if (_errs1) {
            vErrors.length = _errs1;
        }
        else {
            vErrors = null;
        }
    }
} validate52.errors = vErrors; return errors === 0; }
function validate47(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.id === undefined) {
        const err0 = { instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: "id" }, message: "must have required property '" + "id" + "'", schema: schema15.required, parentSchema: schema15, data };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    if (data.schema === undefined) {
        const err1 = { instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: "schema" }, message: "must have required property '" + "schema" + "'", schema: schema15.required, parentSchema: schema15, data };
        if (vErrors === null) {
            vErrors = [err1];
        }
        else {
            vErrors.push(err1);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "group")) || (key0 === "schema")) || (key0 === "issuance")) || (key0 === "constraints"))) {
            const err2 = { instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15, data };
            if (vErrors === null) {
                vErrors = [err2];
            }
            else {
                vErrors.push(err2);
            }
            errors++;
        }
    }
    if (data.id !== undefined) {
        let data0 = data.id;
        if (typeof data0 !== "string") {
            const err3 = { instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.id.type, parentSchema: schema15.properties.id, data: data0 };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.name !== undefined) {
        let data1 = data.name;
        if (typeof data1 !== "string") {
            const err4 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.name.type, parentSchema: schema15.properties.name, data: data1 };
            if (vErrors === null) {
                vErrors = [err4];
            }
            else {
                vErrors.push(err4);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data2 = data.purpose;
        if (typeof data2 !== "string") {
            const err5 = { instancePath: instancePath + "/purpose", schemaPath: "#/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.purpose.type, parentSchema: schema15.properties.purpose, data: data2 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.group !== undefined) {
        let data3 = data.group;
        if (Array.isArray(data3)) {
            const len0 = data3.length;
            for (let i0 = 0; i0 < len0; i0++) {
                let data4 = data3[i0];
                if (typeof data4 !== "string") {
                    const err6 = { instancePath: instancePath + "/group/" + i0, schemaPath: "#/properties/group/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.group.items.type, parentSchema: schema15.properties.group.items, data: data4 };
                    if (vErrors === null) {
                        vErrors = [err6];
                    }
                    else {
                        vErrors.push(err6);
                    }
                    errors++;
                }
            }
        }
        else {
            const err7 = { instancePath: instancePath + "/group", schemaPath: "#/properties/group/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.group.type, parentSchema: schema15.properties.group, data: data3 };
            if (vErrors === null) {
                vErrors = [err7];
            }
            else {
                vErrors.push(err7);
            }
            errors++;
        }
    }
    if (data.schema !== undefined) {
        let data5 = data.schema;
        if (Array.isArray(data5)) {
            const len1 = data5.length;
            for (let i1 = 0; i1 < len1; i1++) {
                if (!(validate48(data5[i1], { instancePath: instancePath + "/schema/" + i1, parentData: data5, parentDataProperty: i1, rootData }))) {
                    vErrors = vErrors === null ? validate48.errors : vErrors.concat(validate48.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err8 = { instancePath: instancePath + "/schema", schemaPath: "#/properties/schema/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.schema.type, parentSchema: schema15.properties.schema, data: data5 };
            if (vErrors === null) {
                vErrors = [err8];
            }
            else {
                vErrors.push(err8);
            }
            errors++;
        }
    }
    if (data.issuance !== undefined) {
        let data7 = data.issuance;
        if (Array.isArray(data7)) {
            const len2 = data7.length;
            for (let i2 = 0; i2 < len2; i2++) {
                if (!(validate50(data7[i2], { instancePath: instancePath + "/issuance/" + i2, parentData: data7, parentDataProperty: i2, rootData }))) {
                    vErrors = vErrors === null ? validate50.errors : vErrors.concat(validate50.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err9 = { instancePath: instancePath + "/issuance", schemaPath: "#/properties/issuance/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.issuance.type, parentSchema: schema15.properties.issuance, data: data7 };
            if (vErrors === null) {
                vErrors = [err9];
            }
            else {
                vErrors.push(err9);
            }
            errors++;
        }
    }
    if (data.constraints !== undefined) {
        let data9 = data.constraints;
        if (data9 && typeof data9 == "object" && !Array.isArray(data9)) {
            for (const key1 in data9) {
                if (!((((((key1 === "limit_disclosure") || (key1 === "statuses")) || (key1 === "fields")) || (key1 === "subject_is_issuer")) || (key1 === "is_holder")) || (key1 === "same_subject"))) {
                    const err10 = { instancePath: instancePath + "/constraints", schemaPath: "#/properties/constraints/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15.properties.constraints, data: data9 };
                    if (vErrors === null) {
                        vErrors = [err10];
                    }
                    else {
                        vErrors.push(err10);
                    }
                    errors++;
                }
            }
            if (data9.limit_disclosure !== undefined) {
                let data10 = data9.limit_disclosure;
                if (typeof data10 !== "string") {
                    const err11 = { instancePath: instancePath + "/constraints/limit_disclosure", schemaPath: "#/properties/constraints/properties/limit_disclosure/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.limit_disclosure.type, parentSchema: schema15.properties.constraints.properties.limit_disclosure, data: data10 };
                    if (vErrors === null) {
                        vErrors = [err11];
                    }
                    else {
                        vErrors.push(err11);
                    }
                    errors++;
                }
                if (!((data10 === "required") || (data10 === "preferred"))) {
                    const err12 = { instancePath: instancePath + "/constraints/limit_disclosure", schemaPath: "#/properties/constraints/properties/limit_disclosure/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.limit_disclosure.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.limit_disclosure.enum, parentSchema: schema15.properties.constraints.properties.limit_disclosure, data: data10 };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
            }
            if (data9.statuses !== undefined) {
                let data11 = data9.statuses;
                if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                    if (data11.active !== undefined) {
                        let data12 = data11.active;
                        if (data12 && typeof data12 == "object" && !Array.isArray(data12)) {
                            if (data12.directive !== undefined) {
                                let data13 = data12.directive;
                                if (typeof data13 !== "string") {
                                    const err13 = { instancePath: instancePath + "/constraints/statuses/active/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/active/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive, data: data13 };
                                    if (vErrors === null) {
                                        vErrors = [err13];
                                    }
                                    else {
                                        vErrors.push(err13);
                                    }
                                    errors++;
                                }
                                if (!(((data13 === "required") || (data13 === "allowed")) || (data13 === "disallowed"))) {
                                    const err14 = { instancePath: instancePath + "/constraints/statuses/active/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/active/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.statuses.properties.active.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive, data: data13 };
                                    if (vErrors === null) {
                                        vErrors = [err14];
                                    }
                                    else {
                                        vErrors.push(err14);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err15 = { instancePath: instancePath + "/constraints/statuses/active", schemaPath: "#/properties/constraints/properties/statuses/properties/active/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.properties.active.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.active, data: data12 };
                            if (vErrors === null) {
                                vErrors = [err15];
                            }
                            else {
                                vErrors.push(err15);
                            }
                            errors++;
                        }
                    }
                    if (data11.suspended !== undefined) {
                        let data14 = data11.suspended;
                        if (data14 && typeof data14 == "object" && !Array.isArray(data14)) {
                            if (data14.directive !== undefined) {
                                let data15 = data14.directive;
                                if (typeof data15 !== "string") {
                                    const err16 = { instancePath: instancePath + "/constraints/statuses/suspended/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/suspended/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive, data: data15 };
                                    if (vErrors === null) {
                                        vErrors = [err16];
                                    }
                                    else {
                                        vErrors.push(err16);
                                    }
                                    errors++;
                                }
                                if (!(((data15 === "required") || (data15 === "allowed")) || (data15 === "disallowed"))) {
                                    const err17 = { instancePath: instancePath + "/constraints/statuses/suspended/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/suspended/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive, data: data15 };
                                    if (vErrors === null) {
                                        vErrors = [err17];
                                    }
                                    else {
                                        vErrors.push(err17);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err18 = { instancePath: instancePath + "/constraints/statuses/suspended", schemaPath: "#/properties/constraints/properties/statuses/properties/suspended/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.properties.suspended.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.suspended, data: data14 };
                            if (vErrors === null) {
                                vErrors = [err18];
                            }
                            else {
                                vErrors.push(err18);
                            }
                            errors++;
                        }
                    }
                    if (data11.revoked !== undefined) {
                        let data16 = data11.revoked;
                        if (data16 && typeof data16 == "object" && !Array.isArray(data16)) {
                            if (data16.directive !== undefined) {
                                let data17 = data16.directive;
                                if (typeof data17 !== "string") {
                                    const err19 = { instancePath: instancePath + "/constraints/statuses/revoked/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/revoked/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive, data: data17 };
                                    if (vErrors === null) {
                                        vErrors = [err19];
                                    }
                                    else {
                                        vErrors.push(err19);
                                    }
                                    errors++;
                                }
                                if (!(((data17 === "required") || (data17 === "allowed")) || (data17 === "disallowed"))) {
                                    const err20 = { instancePath: instancePath + "/constraints/statuses/revoked/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/revoked/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive, data: data17 };
                                    if (vErrors === null) {
                                        vErrors = [err20];
                                    }
                                    else {
                                        vErrors.push(err20);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err21 = { instancePath: instancePath + "/constraints/statuses/revoked", schemaPath: "#/properties/constraints/properties/statuses/properties/revoked/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.properties.revoked.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.revoked, data: data16 };
                            if (vErrors === null) {
                                vErrors = [err21];
                            }
                            else {
                                vErrors.push(err21);
                            }
                            errors++;
                        }
                    }
                }
                else {
                    const err22 = { instancePath: instancePath + "/constraints/statuses", schemaPath: "#/properties/constraints/properties/statuses/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.type, parentSchema: schema15.properties.constraints.properties.statuses, data: data11 };
                    if (vErrors === null) {
                        vErrors = [err22];
                    }
                    else {
                        vErrors.push(err22);
                    }
                    errors++;
                }
            }
            if (data9.fields !== undefined) {
                let data18 = data9.fields;
                if (Array.isArray(data18)) {
                    const len3 = data18.length;
                    for (let i3 = 0; i3 < len3; i3++) {
                        if (!(validate52(data18[i3], { instancePath: instancePath + "/constraints/fields/" + i3, parentData: data18, parentDataProperty: i3, rootData }))) {
                            vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors);
                            errors = vErrors.length;
                        }
                    }
                }
                else {
                    const err23 = { instancePath: instancePath + "/constraints/fields", schemaPath: "#/properties/constraints/properties/fields/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.fields.type, parentSchema: schema15.properties.constraints.properties.fields, data: data18 };
                    if (vErrors === null) {
                        vErrors = [err23];
                    }
                    else {
                        vErrors.push(err23);
                    }
                    errors++;
                }
            }
            if (data9.subject_is_issuer !== undefined) {
                let data20 = data9.subject_is_issuer;
                if (typeof data20 !== "string") {
                    const err24 = { instancePath: instancePath + "/constraints/subject_is_issuer", schemaPath: "#/properties/constraints/properties/subject_is_issuer/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.subject_is_issuer.type, parentSchema: schema15.properties.constraints.properties.subject_is_issuer, data: data20 };
                    if (vErrors === null) {
                        vErrors = [err24];
                    }
                    else {
                        vErrors.push(err24);
                    }
                    errors++;
                }
                if (!((data20 === "required") || (data20 === "preferred"))) {
                    const err25 = { instancePath: instancePath + "/constraints/subject_is_issuer", schemaPath: "#/properties/constraints/properties/subject_is_issuer/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.subject_is_issuer.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.subject_is_issuer.enum, parentSchema: schema15.properties.constraints.properties.subject_is_issuer, data: data20 };
                    if (vErrors === null) {
                        vErrors = [err25];
                    }
                    else {
                        vErrors.push(err25);
                    }
                    errors++;
                }
            }
            if (data9.is_holder !== undefined) {
                let data21 = data9.is_holder;
                if (Array.isArray(data21)) {
                    const len4 = data21.length;
                    for (let i4 = 0; i4 < len4; i4++) {
                        let data22 = data21[i4];
                        if (data22 && typeof data22 == "object" && !Array.isArray(data22)) {
                            if (data22.field_id === undefined) {
                                const err26 = { instancePath: instancePath + "/constraints/is_holder/" + i4, schemaPath: "#/properties/constraints/properties/is_holder/items/required", keyword: "required", params: { missingProperty: "field_id" }, message: "must have required property '" + "field_id" + "'", schema: schema15.properties.constraints.properties.is_holder.items.required, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data22 };
                                if (vErrors === null) {
                                    vErrors = [err26];
                                }
                                else {
                                    vErrors.push(err26);
                                }
                                errors++;
                            }
                            if (data22.directive === undefined) {
                                const err27 = { instancePath: instancePath + "/constraints/is_holder/" + i4, schemaPath: "#/properties/constraints/properties/is_holder/items/required", keyword: "required", params: { missingProperty: "directive" }, message: "must have required property '" + "directive" + "'", schema: schema15.properties.constraints.properties.is_holder.items.required, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data22 };
                                if (vErrors === null) {
                                    vErrors = [err27];
                                }
                                else {
                                    vErrors.push(err27);
                                }
                                errors++;
                            }
                            for (const key2 in data22) {
                                if (!((key2 === "field_id") || (key2 === "directive"))) {
                                    const err28 = { instancePath: instancePath + "/constraints/is_holder/" + i4, schemaPath: "#/properties/constraints/properties/is_holder/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data22 };
                                    if (vErrors === null) {
                                        vErrors = [err28];
                                    }
                                    else {
                                        vErrors.push(err28);
                                    }
                                    errors++;
                                }
                            }
                            if (data22.field_id !== undefined) {
                                let data23 = data22.field_id;
                                if (Array.isArray(data23)) {
                                    const len5 = data23.length;
                                    for (let i5 = 0; i5 < len5; i5++) {
                                        let data24 = data23[i5];
                                        if (typeof data24 !== "string") {
                                            const err29 = { instancePath: instancePath + "/constraints/is_holder/" + i4 + "/field_id/" + i5, schemaPath: "#/properties/constraints/properties/is_holder/items/properties/field_id/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.is_holder.items.properties.field_id.items.type, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.field_id.items, data: data24 };
                                            if (vErrors === null) {
                                                vErrors = [err29];
                                            }
                                            else {
                                                vErrors.push(err29);
                                            }
                                            errors++;
                                        }
                                    }
                                }
                                else {
                                    const err30 = { instancePath: instancePath + "/constraints/is_holder/" + i4 + "/field_id", schemaPath: "#/properties/constraints/properties/is_holder/items/properties/field_id/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.is_holder.items.properties.field_id.type, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.field_id, data: data23 };
                                    if (vErrors === null) {
                                        vErrors = [err30];
                                    }
                                    else {
                                        vErrors.push(err30);
                                    }
                                    errors++;
                                }
                            }
                            if (data22.directive !== undefined) {
                                let data25 = data22.directive;
                                if (typeof data25 !== "string") {
                                    const err31 = { instancePath: instancePath + "/constraints/is_holder/" + i4 + "/directive", schemaPath: "#/properties/constraints/properties/is_holder/items/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.is_holder.items.properties.directive.type, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.directive, data: data25 };
                                    if (vErrors === null) {
                                        vErrors = [err31];
                                    }
                                    else {
                                        vErrors.push(err31);
                                    }
                                    errors++;
                                }
                                if (!((data25 === "required") || (data25 === "preferred"))) {
                                    const err32 = { instancePath: instancePath + "/constraints/is_holder/" + i4 + "/directive", schemaPath: "#/properties/constraints/properties/is_holder/items/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.is_holder.items.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.is_holder.items.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.directive, data: data25 };
                                    if (vErrors === null) {
                                        vErrors = [err32];
                                    }
                                    else {
                                        vErrors.push(err32);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err33 = { instancePath: instancePath + "/constraints/is_holder/" + i4, schemaPath: "#/properties/constraints/properties/is_holder/items/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.is_holder.items.type, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data22 };
                            if (vErrors === null) {
                                vErrors = [err33];
                            }
                            else {
                                vErrors.push(err33);
                            }
                            errors++;
                        }
                    }
                }
                else {
                    const err34 = { instancePath: instancePath + "/constraints/is_holder", schemaPath: "#/properties/constraints/properties/is_holder/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.is_holder.type, parentSchema: schema15.properties.constraints.properties.is_holder, data: data21 };
                    if (vErrors === null) {
                        vErrors = [err34];
                    }
                    else {
                        vErrors.push(err34);
                    }
                    errors++;
                }
            }
            if (data9.same_subject !== undefined) {
                let data26 = data9.same_subject;
                if (Array.isArray(data26)) {
                    const len6 = data26.length;
                    for (let i6 = 0; i6 < len6; i6++) {
                        let data27 = data26[i6];
                        if (data27 && typeof data27 == "object" && !Array.isArray(data27)) {
                            if (data27.field_id === undefined) {
                                const err35 = { instancePath: instancePath + "/constraints/same_subject/" + i6, schemaPath: "#/properties/constraints/properties/same_subject/items/required", keyword: "required", params: { missingProperty: "field_id" }, message: "must have required property '" + "field_id" + "'", schema: schema15.properties.constraints.properties.same_subject.items.required, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data27 };
                                if (vErrors === null) {
                                    vErrors = [err35];
                                }
                                else {
                                    vErrors.push(err35);
                                }
                                errors++;
                            }
                            if (data27.directive === undefined) {
                                const err36 = { instancePath: instancePath + "/constraints/same_subject/" + i6, schemaPath: "#/properties/constraints/properties/same_subject/items/required", keyword: "required", params: { missingProperty: "directive" }, message: "must have required property '" + "directive" + "'", schema: schema15.properties.constraints.properties.same_subject.items.required, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data27 };
                                if (vErrors === null) {
                                    vErrors = [err36];
                                }
                                else {
                                    vErrors.push(err36);
                                }
                                errors++;
                            }
                            for (const key3 in data27) {
                                if (!((key3 === "field_id") || (key3 === "directive"))) {
                                    const err37 = { instancePath: instancePath + "/constraints/same_subject/" + i6, schemaPath: "#/properties/constraints/properties/same_subject/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data27 };
                                    if (vErrors === null) {
                                        vErrors = [err37];
                                    }
                                    else {
                                        vErrors.push(err37);
                                    }
                                    errors++;
                                }
                            }
                            if (data27.field_id !== undefined) {
                                let data28 = data27.field_id;
                                if (Array.isArray(data28)) {
                                    const len7 = data28.length;
                                    for (let i7 = 0; i7 < len7; i7++) {
                                        let data29 = data28[i7];
                                        if (typeof data29 !== "string") {
                                            const err38 = { instancePath: instancePath + "/constraints/same_subject/" + i6 + "/field_id/" + i7, schemaPath: "#/properties/constraints/properties/same_subject/items/properties/field_id/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.same_subject.items.properties.field_id.items.type, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.field_id.items, data: data29 };
                                            if (vErrors === null) {
                                                vErrors = [err38];
                                            }
                                            else {
                                                vErrors.push(err38);
                                            }
                                            errors++;
                                        }
                                    }
                                }
                                else {
                                    const err39 = { instancePath: instancePath + "/constraints/same_subject/" + i6 + "/field_id", schemaPath: "#/properties/constraints/properties/same_subject/items/properties/field_id/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.same_subject.items.properties.field_id.type, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.field_id, data: data28 };
                                    if (vErrors === null) {
                                        vErrors = [err39];
                                    }
                                    else {
                                        vErrors.push(err39);
                                    }
                                    errors++;
                                }
                            }
                            if (data27.directive !== undefined) {
                                let data30 = data27.directive;
                                if (typeof data30 !== "string") {
                                    const err40 = { instancePath: instancePath + "/constraints/same_subject/" + i6 + "/directive", schemaPath: "#/properties/constraints/properties/same_subject/items/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.same_subject.items.properties.directive.type, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.directive, data: data30 };
                                    if (vErrors === null) {
                                        vErrors = [err40];
                                    }
                                    else {
                                        vErrors.push(err40);
                                    }
                                    errors++;
                                }
                                if (!((data30 === "required") || (data30 === "preferred"))) {
                                    const err41 = { instancePath: instancePath + "/constraints/same_subject/" + i6 + "/directive", schemaPath: "#/properties/constraints/properties/same_subject/items/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.same_subject.items.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.same_subject.items.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.directive, data: data30 };
                                    if (vErrors === null) {
                                        vErrors = [err41];
                                    }
                                    else {
                                        vErrors.push(err41);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err42 = { instancePath: instancePath + "/constraints/same_subject/" + i6, schemaPath: "#/properties/constraints/properties/same_subject/items/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.same_subject.items.type, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data27 };
                            if (vErrors === null) {
                                vErrors = [err42];
                            }
                            else {
                                vErrors.push(err42);
                            }
                            errors++;
                        }
                    }
                }
                else {
                    const err43 = { instancePath: instancePath + "/constraints/same_subject", schemaPath: "#/properties/constraints/properties/same_subject/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.same_subject.type, parentSchema: schema15.properties.constraints.properties.same_subject, data: data26 };
                    if (vErrors === null) {
                        vErrors = [err43];
                    }
                    else {
                        vErrors.push(err43);
                    }
                    errors++;
                }
            }
        }
        else {
            const err44 = { instancePath: instancePath + "/constraints", schemaPath: "#/properties/constraints/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.type, parentSchema: schema15.properties.constraints, data: data9 };
            if (vErrors === null) {
                vErrors = [err44];
            }
            else {
                vErrors.push(err44);
            }
            errors++;
        }
    }
}
else {
    const err45 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.type, parentSchema: schema15, data };
    if (vErrors === null) {
        vErrors = [err45];
    }
    else {
        vErrors.push(err45);
    }
    errors++;
} validate47.errors = vErrors; return errors === 0; }
function validate42(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.presentation_definition !== undefined) {
        let data0 = data.presentation_definition;
        if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
            if (data0.id === undefined) {
                const err0 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/required", keyword: "required", params: { missingProperty: "id" }, message: "must have required property '" + "id" + "'", schema: schema12.properties.presentation_definition.required, parentSchema: schema12.properties.presentation_definition, data: data0 };
                if (vErrors === null) {
                    vErrors = [err0];
                }
                else {
                    vErrors.push(err0);
                }
                errors++;
            }
            if (data0.input_descriptors === undefined) {
                const err1 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/required", keyword: "required", params: { missingProperty: "input_descriptors" }, message: "must have required property '" + "input_descriptors" + "'", schema: schema12.properties.presentation_definition.required, parentSchema: schema12.properties.presentation_definition, data: data0 };
                if (vErrors === null) {
                    vErrors = [err1];
                }
                else {
                    vErrors.push(err1);
                }
                errors++;
            }
            for (const key0 in data0) {
                if (!((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors"))) {
                    const err2 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema12.properties.presentation_definition, data: data0 };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
            }
            if (data0.id !== undefined) {
                let data1 = data0.id;
                if (typeof data1 !== "string") {
                    const err3 = { instancePath: instancePath + "/presentation_definition/id", schemaPath: "#/properties/presentation_definition/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema12.properties.presentation_definition.properties.id.type, parentSchema: schema12.properties.presentation_definition.properties.id, data: data1 };
                    if (vErrors === null) {
                        vErrors = [err3];
                    }
                    else {
                        vErrors.push(err3);
                    }
                    errors++;
                }
            }
            if (data0.name !== undefined) {
                let data2 = data0.name;
                if (typeof data2 !== "string") {
                    const err4 = { instancePath: instancePath + "/presentation_definition/name", schemaPath: "#/properties/presentation_definition/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema12.properties.presentation_definition.properties.name.type, parentSchema: schema12.properties.presentation_definition.properties.name, data: data2 };
                    if (vErrors === null) {
                        vErrors = [err4];
                    }
                    else {
                        vErrors.push(err4);
                    }
                    errors++;
                }
            }
            if (data0.purpose !== undefined) {
                let data3 = data0.purpose;
                if (typeof data3 !== "string") {
                    const err5 = { instancePath: instancePath + "/presentation_definition/purpose", schemaPath: "#/properties/presentation_definition/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema12.properties.presentation_definition.properties.purpose.type, parentSchema: schema12.properties.presentation_definition.properties.purpose, data: data3 };
                    if (vErrors === null) {
                        vErrors = [err5];
                    }
                    else {
                        vErrors.push(err5);
                    }
                    errors++;
                }
            }
            if (data0.format !== undefined) {
                if (!(validate43(data0.format, { instancePath: instancePath + "/presentation_definition/format", parentData: data0, parentDataProperty: "format", rootData }))) {
                    vErrors = vErrors === null ? validate43.errors : vErrors.concat(validate43.errors);
                    errors = vErrors.length;
                }
            }
            if (data0.submission_requirements !== undefined) {
                let data5 = data0.submission_requirements;
                if (Array.isArray(data5)) {
                    const len0 = data5.length;
                    for (let i0 = 0; i0 < len0; i0++) {
                        if (!(validate45(data5[i0], { instancePath: instancePath + "/presentation_definition/submission_requirements/" + i0, parentData: data5, parentDataProperty: i0, rootData }))) {
                            vErrors = vErrors === null ? validate45.errors : vErrors.concat(validate45.errors);
                            errors = vErrors.length;
                        }
                    }
                }
                else {
                    const err6 = { instancePath: instancePath + "/presentation_definition/submission_requirements", schemaPath: "#/properties/presentation_definition/properties/submission_requirements/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema12.properties.presentation_definition.properties.submission_requirements.type, parentSchema: schema12.properties.presentation_definition.properties.submission_requirements, data: data5 };
                    if (vErrors === null) {
                        vErrors = [err6];
                    }
                    else {
                        vErrors.push(err6);
                    }
                    errors++;
                }
            }
            if (data0.input_descriptors !== undefined) {
                let data7 = data0.input_descriptors;
                if (Array.isArray(data7)) {
                    const len1 = data7.length;
                    for (let i1 = 0; i1 < len1; i1++) {
                        if (!(validate47(data7[i1], { instancePath: instancePath + "/presentation_definition/input_descriptors/" + i1, parentData: data7, parentDataProperty: i1, rootData }))) {
                            vErrors = vErrors === null ? validate47.errors : vErrors.concat(validate47.errors);
                            errors = vErrors.length;
                        }
                    }
                }
                else {
                    const err7 = { instancePath: instancePath + "/presentation_definition/input_descriptors", schemaPath: "#/properties/presentation_definition/properties/input_descriptors/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema12.properties.presentation_definition.properties.input_descriptors.type, parentSchema: schema12.properties.presentation_definition.properties.input_descriptors, data: data7 };
                    if (vErrors === null) {
                        vErrors = [err7];
                    }
                    else {
                        vErrors.push(err7);
                    }
                    errors++;
                }
            }
        }
        else {
            const err8 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema12.properties.presentation_definition.type, parentSchema: schema12.properties.presentation_definition, data: data0 };
            if (vErrors === null) {
                vErrors = [err8];
            }
            else {
                vErrors.push(err8);
            }
            errors++;
        }
    }
}
else {
    const err9 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema12.type, parentSchema: schema12, data };
    if (vErrors === null) {
        vErrors = [err9];
    }
    else {
        vErrors.push(err9);
    }
    errors++;
} validate42.errors = vErrors; return errors === 0; }
//# sourceMappingURL=data:application/json;base64,