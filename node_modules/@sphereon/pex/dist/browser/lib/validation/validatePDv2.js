"use strict";
module.exports = validate42;
module.exports.default = validate42;
const schema12 = { "$schema": "http://json-schema.org/draft-07/schema#", "title": "Presentation Definition", "definitions": { "issuance": { "type": "object", "properties": { "manifest": { "type": "string" } }, "additionalProperties": true }, "format": { "type": "object", "patternProperties": { "^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$": { "type": "object", "properties": { "alg": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["alg"], "additionalProperties": false }, "^ldp_vc$|^ldp_vp$|^ldp$": { "type": "object", "properties": { "proof_type": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["proof_type"], "additionalProperties": false }, "additionalProperties": false }, "additionalProperties": false }, "submission_requirements": { "type": "object", "oneOf": [{ "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from": { "type": "string" } }, "required": ["rule", "from"], "additionalProperties": false }, { "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from_nested": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/submission_requirements" } } }, "required": ["rule", "from_nested"], "additionalProperties": false }] }, "input_descriptors": { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "purpose": { "type": "string" }, "issuance": { "type": "array", "items": { "$ref": "#/definitions/issuance" } }, "group": { "type": "array", "items": { "type": "string" } }, "format": { "$ref": "#/definitions/format" }, "constraints": { "type": "object", "properties": { "limit_disclosure": { "type": "string", "enum": ["required", "preferred"] }, "statuses": { "type": "object", "properties": { "active": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "suspended": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "revoked": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } } } }, "fields": { "type": "array", "items": { "$ref": "#/definitions/field" } }, "subject_is_issuer": { "type": "string", "enum": ["required", "preferred"] }, "is_holder": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } }, "same_subject": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } } }, "additionalProperties": false } }, "required": ["id"], "additionalProperties": false }, "field": { "type": "object", "oneOf": [{ "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "intent_to_retain": { "type": "boolean" }, "filter": { "$ref": "http://json-schema.org/schema#" }, "name": { "type": "string" } }, "required": ["path"], "additionalProperties": false }, { "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "intent_to_retain": { "type": "boolean" }, "filter": { "$ref": "http://json-schema.org/schema#" }, "predicate": { "type": "string", "enum": ["required", "preferred"] }, "name": { "type": "string" } }, "required": ["path", "filter", "predicate"], "additionalProperties": false }] } }, "type": "object", "properties": { "presentation_definition": { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "purpose": { "type": "string" }, "format": { "$ref": "#/definitions/format" }, "frame": { "type": "object", "additionalProperties": true }, "submission_requirements": { "type": "array", "items": { "$ref": "#/definitions/submission_requirements" } }, "input_descriptors": { "type": "array", "items": { "$ref": "#/definitions/input_descriptors" } } }, "required": ["id", "input_descriptors"], "additionalProperties": false } } };
const schema13 = { "type": "object", "patternProperties": { "^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$": { "type": "object", "properties": { "alg": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["alg"], "additionalProperties": false }, "^ldp_vc$|^ldp_vp$|^ldp$": { "type": "object", "properties": { "proof_type": { "type": "array", "minItems": 1, "items": { "type": "string" } } }, "required": ["proof_type"], "additionalProperties": false }, "additionalProperties": false }, "additionalProperties": false };
const pattern0 = new RegExp("^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$", "u");
const pattern1 = new RegExp("^ldp_vc$|^ldp_vp$|^ldp$", "u");
const pattern2 = new RegExp("additionalProperties", "u");
function validate43(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    for (const key0 in data) {
        if (!(((pattern0.test(key0)) || (pattern1.test(key0))) || (pattern2.test(key0)))) {
            const err0 = { instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema13, data };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
    for (const key1 in data) {
        if (pattern0.test(key1)) {
            let data0 = data[key1];
            if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
                if (data0.alg === undefined) {
                    const err1 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24%7C%5Emso_mdoc%24/required", keyword: "required", params: { missingProperty: "alg" }, message: "must have required property '" + "alg" + "'", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"].required, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"], data: data0 };
                    if (vErrors === null) {
                        vErrors = [err1];
                    }
                    else {
                        vErrors.push(err1);
                    }
                    errors++;
                }
                for (const key2 in data0) {
                    if (!(key2 === "alg")) {
                        const err2 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24%7C%5Emso_mdoc%24/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties", schema: false, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"], data: data0 };
                        if (vErrors === null) {
                            vErrors = [err2];
                        }
                        else {
                            vErrors.push(err2);
                        }
                        errors++;
                    }
                }
                if (data0.alg !== undefined) {
                    let data1 = data0.alg;
                    if (Array.isArray(data1)) {
                        if (data1.length < 1) {
                            const err3 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/alg", schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24%7C%5Emso_mdoc%24/properties/alg/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"].properties.alg, data: data1 };
                            if (vErrors === null) {
                                vErrors = [err3];
                            }
                            else {
                                vErrors.push(err3);
                            }
                            errors++;
                        }
                        const len0 = data1.length;
                        for (let i0 = 0; i0 < len0; i0++) {
                            let data2 = data1[i0];
                            if (typeof data2 !== "string") {
                                const err4 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/alg/" + i0, schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24%7C%5Emso_mdoc%24/properties/alg/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"].properties.alg.items.type, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"].properties.alg.items, data: data2 };
                                if (vErrors === null) {
                                    vErrors = [err4];
                                }
                                else {
                                    vErrors.push(err4);
                                }
                                errors++;
                            }
                        }
                    }
                    else {
                        const err5 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1") + "/alg", schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24%7C%5Emso_mdoc%24/properties/alg/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"].properties.alg.type, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"].properties.alg, data: data1 };
                        if (vErrors === null) {
                            vErrors = [err5];
                        }
                        else {
                            vErrors.push(err5);
                        }
                        errors++;
                    }
                }
            }
            else {
                const err6 = { instancePath: instancePath + "/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Ejwt%24%7C%5Ejwt_vc%24%7C%5Ejwt_vc_json%24%7C%5Ejwt_vp%24%7C%5Emso_mdoc%24/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"].type, parentSchema: schema13.patternProperties["^jwt$|^jwt_vc$|^jwt_vc_json$|^jwt_vp$|^mso_mdoc$"], data: data0 };
                if (vErrors === null) {
                    vErrors = [err6];
                }
                else {
                    vErrors.push(err6);
                }
                errors++;
            }
        }
    }
    for (const key3 in data) {
        if (pattern1.test(key3)) {
            let data3 = data[key3];
            if (data3 && typeof data3 == "object" && !Array.isArray(data3)) {
                if (data3.proof_type === undefined) {
                    const err7 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/required", keyword: "required", params: { missingProperty: "proof_type" }, message: "must have required property '" + "proof_type" + "'", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].required, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"], data: data3 };
                    if (vErrors === null) {
                        vErrors = [err7];
                    }
                    else {
                        vErrors.push(err7);
                    }
                    errors++;
                }
                for (const key4 in data3) {
                    if (!(key4 === "proof_type")) {
                        const err8 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties", schema: false, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"], data: data3 };
                        if (vErrors === null) {
                            vErrors = [err8];
                        }
                        else {
                            vErrors.push(err8);
                        }
                        errors++;
                    }
                }
                if (data3.proof_type !== undefined) {
                    let data4 = data3.proof_type;
                    if (Array.isArray(data4)) {
                        if (data4.length < 1) {
                            const err9 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/proof_type", schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/properties/proof_type/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type, data: data4 };
                            if (vErrors === null) {
                                vErrors = [err9];
                            }
                            else {
                                vErrors.push(err9);
                            }
                            errors++;
                        }
                        const len1 = data4.length;
                        for (let i1 = 0; i1 < len1; i1++) {
                            let data5 = data4[i1];
                            if (typeof data5 !== "string") {
                                const err10 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/proof_type/" + i1, schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/properties/proof_type/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type.items.type, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type.items, data: data5 };
                                if (vErrors === null) {
                                    vErrors = [err10];
                                }
                                else {
                                    vErrors.push(err10);
                                }
                                errors++;
                            }
                        }
                    }
                    else {
                        const err11 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1") + "/proof_type", schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/properties/proof_type/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type.type, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].properties.proof_type, data: data4 };
                        if (vErrors === null) {
                            vErrors = [err11];
                        }
                        else {
                            vErrors.push(err11);
                        }
                        errors++;
                    }
                }
            }
            else {
                const err12 = { instancePath: instancePath + "/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/%5Eldp_vc%24%7C%5Eldp_vp%24%7C%5Eldp%24/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"].type, parentSchema: schema13.patternProperties["^ldp_vc$|^ldp_vp$|^ldp$"], data: data3 };
                if (vErrors === null) {
                    vErrors = [err12];
                }
                else {
                    vErrors.push(err12);
                }
                errors++;
            }
        }
    }
    for (const key5 in data) {
        if (pattern2.test(key5)) {
            const err13 = { instancePath: instancePath + "/" + key5.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/patternProperties/additionalProperties/false schema", keyword: "false schema", params: {}, message: "boolean schema is false", schema: false, parentSchema: schema13.patternProperties.additionalProperties, data: data[key5] };
            if (vErrors === null) {
                vErrors = [err13];
            }
            else {
                vErrors.push(err13);
            }
            errors++;
        }
    }
}
else {
    const err14 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema13.type, parentSchema: schema13, data };
    if (vErrors === null) {
        vErrors = [err14];
    }
    else {
        vErrors.push(err14);
    }
    errors++;
} validate43.errors = vErrors; return errors === 0; }
const schema14 = { "type": "object", "oneOf": [{ "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from": { "type": "string" } }, "required": ["rule", "from"], "additionalProperties": false }, { "properties": { "name": { "type": "string" }, "purpose": { "type": "string" }, "rule": { "type": "string", "enum": ["all", "pick"] }, "count": { "type": "integer", "minimum": 1 }, "min": { "type": "integer", "minimum": 0 }, "max": { "type": "integer", "minimum": 0 }, "from_nested": { "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/submission_requirements" } } }, "required": ["rule", "from_nested"], "additionalProperties": false }] };
const wrapper0 = { validate: validate45 };
function validate45(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    const err0 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema14.type, parentSchema: schema14, data };
    if (vErrors === null) {
        vErrors = [err0];
    }
    else {
        vErrors.push(err0);
    }
    errors++;
} const _errs1 = errors; let valid0 = false; let passing0 = null; const _errs2 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.rule === undefined) {
        const err1 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: "rule" }, message: "must have required property '" + "rule" + "'", schema: schema14.oneOf[0].required, parentSchema: schema14.oneOf[0], data };
        if (vErrors === null) {
            vErrors = [err1];
        }
        else {
            vErrors.push(err1);
        }
        errors++;
    }
    if (data.from === undefined) {
        const err2 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: "from" }, message: "must have required property '" + "from" + "'", schema: schema14.oneOf[0].required, parentSchema: schema14.oneOf[0], data };
        if (vErrors === null) {
            vErrors = [err2];
        }
        else {
            vErrors.push(err2);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!(((((((key0 === "name") || (key0 === "purpose")) || (key0 === "rule")) || (key0 === "count")) || (key0 === "min")) || (key0 === "max")) || (key0 === "from"))) {
            const err3 = { instancePath, schemaPath: "#/oneOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema14.oneOf[0], data };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.name !== undefined) {
        let data0 = data.name;
        if (typeof data0 !== "string") {
            const err4 = { instancePath: instancePath + "/name", schemaPath: "#/oneOf/0/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.name.type, parentSchema: schema14.oneOf[0].properties.name, data: data0 };
            if (vErrors === null) {
                vErrors = [err4];
            }
            else {
                vErrors.push(err4);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data1 = data.purpose;
        if (typeof data1 !== "string") {
            const err5 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/0/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.purpose.type, parentSchema: schema14.oneOf[0].properties.purpose, data: data1 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.rule !== undefined) {
        let data2 = data.rule;
        if (typeof data2 !== "string") {
            const err6 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/0/properties/rule/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.rule.type, parentSchema: schema14.oneOf[0].properties.rule, data: data2 };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
        if (!((data2 === "all") || (data2 === "pick"))) {
            const err7 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/0/properties/rule/enum", keyword: "enum", params: { allowedValues: schema14.oneOf[0].properties.rule.enum }, message: "must be equal to one of the allowed values", schema: schema14.oneOf[0].properties.rule.enum, parentSchema: schema14.oneOf[0].properties.rule, data: data2 };
            if (vErrors === null) {
                vErrors = [err7];
            }
            else {
                vErrors.push(err7);
            }
            errors++;
        }
    }
    if (data.count !== undefined) {
        let data3 = data.count;
        if (!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))) {
            const err8 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/0/properties/count/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[0].properties.count.type, parentSchema: schema14.oneOf[0].properties.count, data: data3 };
            if (vErrors === null) {
                vErrors = [err8];
            }
            else {
                vErrors.push(err8);
            }
            errors++;
        }
        if (typeof data3 == "number") {
            if (data3 < 1 || isNaN(data3)) {
                const err9 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/0/properties/count/minimum", keyword: "minimum", params: { comparison: ">=", limit: 1 }, message: "must be >= 1", schema: 1, parentSchema: schema14.oneOf[0].properties.count, data: data3 };
                if (vErrors === null) {
                    vErrors = [err9];
                }
                else {
                    vErrors.push(err9);
                }
                errors++;
            }
        }
    }
    if (data.min !== undefined) {
        let data4 = data.min;
        if (!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))) {
            const err10 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/0/properties/min/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[0].properties.min.type, parentSchema: schema14.oneOf[0].properties.min, data: data4 };
            if (vErrors === null) {
                vErrors = [err10];
            }
            else {
                vErrors.push(err10);
            }
            errors++;
        }
        if (typeof data4 == "number") {
            if (data4 < 0 || isNaN(data4)) {
                const err11 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/0/properties/min/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[0].properties.min, data: data4 };
                if (vErrors === null) {
                    vErrors = [err11];
                }
                else {
                    vErrors.push(err11);
                }
                errors++;
            }
        }
    }
    if (data.max !== undefined) {
        let data5 = data.max;
        if (!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))) {
            const err12 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/0/properties/max/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[0].properties.max.type, parentSchema: schema14.oneOf[0].properties.max, data: data5 };
            if (vErrors === null) {
                vErrors = [err12];
            }
            else {
                vErrors.push(err12);
            }
            errors++;
        }
        if (typeof data5 == "number") {
            if (data5 < 0 || isNaN(data5)) {
                const err13 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/0/properties/max/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[0].properties.max, data: data5 };
                if (vErrors === null) {
                    vErrors = [err13];
                }
                else {
                    vErrors.push(err13);
                }
                errors++;
            }
        }
    }
    if (data.from !== undefined) {
        let data6 = data.from;
        if (typeof data6 !== "string") {
            const err14 = { instancePath: instancePath + "/from", schemaPath: "#/oneOf/0/properties/from/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[0].properties.from.type, parentSchema: schema14.oneOf[0].properties.from, data: data6 };
            if (vErrors === null) {
                vErrors = [err14];
            }
            else {
                vErrors.push(err14);
            }
            errors++;
        }
    }
} var _valid0 = _errs2 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs18 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.rule === undefined) {
        const err15 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "rule" }, message: "must have required property '" + "rule" + "'", schema: schema14.oneOf[1].required, parentSchema: schema14.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err15];
        }
        else {
            vErrors.push(err15);
        }
        errors++;
    }
    if (data.from_nested === undefined) {
        const err16 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "from_nested" }, message: "must have required property '" + "from_nested" + "'", schema: schema14.oneOf[1].required, parentSchema: schema14.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err16];
        }
        else {
            vErrors.push(err16);
        }
        errors++;
    }
    for (const key1 in data) {
        if (!(((((((key1 === "name") || (key1 === "purpose")) || (key1 === "rule")) || (key1 === "count")) || (key1 === "min")) || (key1 === "max")) || (key1 === "from_nested"))) {
            const err17 = { instancePath, schemaPath: "#/oneOf/1/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties", schema: false, parentSchema: schema14.oneOf[1], data };
            if (vErrors === null) {
                vErrors = [err17];
            }
            else {
                vErrors.push(err17);
            }
            errors++;
        }
    }
    if (data.name !== undefined) {
        let data7 = data.name;
        if (typeof data7 !== "string") {
            const err18 = { instancePath: instancePath + "/name", schemaPath: "#/oneOf/1/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[1].properties.name.type, parentSchema: schema14.oneOf[1].properties.name, data: data7 };
            if (vErrors === null) {
                vErrors = [err18];
            }
            else {
                vErrors.push(err18);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data8 = data.purpose;
        if (typeof data8 !== "string") {
            const err19 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/1/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[1].properties.purpose.type, parentSchema: schema14.oneOf[1].properties.purpose, data: data8 };
            if (vErrors === null) {
                vErrors = [err19];
            }
            else {
                vErrors.push(err19);
            }
            errors++;
        }
    }
    if (data.rule !== undefined) {
        let data9 = data.rule;
        if (typeof data9 !== "string") {
            const err20 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/1/properties/rule/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema14.oneOf[1].properties.rule.type, parentSchema: schema14.oneOf[1].properties.rule, data: data9 };
            if (vErrors === null) {
                vErrors = [err20];
            }
            else {
                vErrors.push(err20);
            }
            errors++;
        }
        if (!((data9 === "all") || (data9 === "pick"))) {
            const err21 = { instancePath: instancePath + "/rule", schemaPath: "#/oneOf/1/properties/rule/enum", keyword: "enum", params: { allowedValues: schema14.oneOf[1].properties.rule.enum }, message: "must be equal to one of the allowed values", schema: schema14.oneOf[1].properties.rule.enum, parentSchema: schema14.oneOf[1].properties.rule, data: data9 };
            if (vErrors === null) {
                vErrors = [err21];
            }
            else {
                vErrors.push(err21);
            }
            errors++;
        }
    }
    if (data.count !== undefined) {
        let data10 = data.count;
        if (!((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10)))) {
            const err22 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/1/properties/count/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[1].properties.count.type, parentSchema: schema14.oneOf[1].properties.count, data: data10 };
            if (vErrors === null) {
                vErrors = [err22];
            }
            else {
                vErrors.push(err22);
            }
            errors++;
        }
        if (typeof data10 == "number") {
            if (data10 < 1 || isNaN(data10)) {
                const err23 = { instancePath: instancePath + "/count", schemaPath: "#/oneOf/1/properties/count/minimum", keyword: "minimum", params: { comparison: ">=", limit: 1 }, message: "must be >= 1", schema: 1, parentSchema: schema14.oneOf[1].properties.count, data: data10 };
                if (vErrors === null) {
                    vErrors = [err23];
                }
                else {
                    vErrors.push(err23);
                }
                errors++;
            }
        }
    }
    if (data.min !== undefined) {
        let data11 = data.min;
        if (!((typeof data11 == "number") && (!(data11 % 1) && !isNaN(data11)))) {
            const err24 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/1/properties/min/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[1].properties.min.type, parentSchema: schema14.oneOf[1].properties.min, data: data11 };
            if (vErrors === null) {
                vErrors = [err24];
            }
            else {
                vErrors.push(err24);
            }
            errors++;
        }
        if (typeof data11 == "number") {
            if (data11 < 0 || isNaN(data11)) {
                const err25 = { instancePath: instancePath + "/min", schemaPath: "#/oneOf/1/properties/min/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[1].properties.min, data: data11 };
                if (vErrors === null) {
                    vErrors = [err25];
                }
                else {
                    vErrors.push(err25);
                }
                errors++;
            }
        }
    }
    if (data.max !== undefined) {
        let data12 = data.max;
        if (!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))) {
            const err26 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/1/properties/max/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema14.oneOf[1].properties.max.type, parentSchema: schema14.oneOf[1].properties.max, data: data12 };
            if (vErrors === null) {
                vErrors = [err26];
            }
            else {
                vErrors.push(err26);
            }
            errors++;
        }
        if (typeof data12 == "number") {
            if (data12 < 0 || isNaN(data12)) {
                const err27 = { instancePath: instancePath + "/max", schemaPath: "#/oneOf/1/properties/max/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema14.oneOf[1].properties.max, data: data12 };
                if (vErrors === null) {
                    vErrors = [err27];
                }
                else {
                    vErrors.push(err27);
                }
                errors++;
            }
        }
    }
    if (data.from_nested !== undefined) {
        let data13 = data.from_nested;
        if (Array.isArray(data13)) {
            if (data13.length < 1) {
                const err28 = { instancePath: instancePath + "/from_nested", schemaPath: "#/oneOf/1/properties/from_nested/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema14.oneOf[1].properties.from_nested, data: data13 };
                if (vErrors === null) {
                    vErrors = [err28];
                }
                else {
                    vErrors.push(err28);
                }
                errors++;
            }
            const len0 = data13.length;
            for (let i0 = 0; i0 < len0; i0++) {
                if (!(wrapper0.validate(data13[i0], { instancePath: instancePath + "/from_nested/" + i0, parentData: data13, parentDataProperty: i0, rootData }))) {
                    vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err29 = { instancePath: instancePath + "/from_nested", schemaPath: "#/oneOf/1/properties/from_nested/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema14.oneOf[1].properties.from_nested.type, parentSchema: schema14.oneOf[1].properties.from_nested, data: data13 };
            if (vErrors === null) {
                vErrors = [err29];
            }
            else {
                vErrors.push(err29);
            }
            errors++;
        }
    }
} var _valid0 = _errs18 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err30 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf", schema: schema14.oneOf, parentSchema: schema14, data };
    if (vErrors === null) {
        vErrors = [err30];
    }
    else {
        vErrors.push(err30);
    }
    errors++;
}
else {
    errors = _errs1;
    if (vErrors !== null) {
        if (_errs1) {
            vErrors.length = _errs1;
        }
        else {
            vErrors = null;
        }
    }
} validate45.errors = vErrors; return errors === 0; }
const schema15 = { "type": "object", "properties": { "id": { "type": "string" }, "name": { "type": "string" }, "purpose": { "type": "string" }, "issuance": { "type": "array", "items": { "$ref": "#/definitions/issuance" } }, "group": { "type": "array", "items": { "type": "string" } }, "format": { "$ref": "#/definitions/format" }, "constraints": { "type": "object", "properties": { "limit_disclosure": { "type": "string", "enum": ["required", "preferred"] }, "statuses": { "type": "object", "properties": { "active": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "suspended": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } }, "revoked": { "type": "object", "properties": { "directive": { "type": "string", "enum": ["required", "allowed", "disallowed"] } } } } }, "fields": { "type": "array", "items": { "$ref": "#/definitions/field" } }, "subject_is_issuer": { "type": "string", "enum": ["required", "preferred"] }, "is_holder": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } }, "same_subject": { "type": "array", "items": { "type": "object", "properties": { "field_id": { "type": "array", "items": { "type": "string" } }, "directive": { "type": "string", "enum": ["required", "preferred"] } }, "required": ["field_id", "directive"], "additionalProperties": false } } }, "additionalProperties": false } }, "required": ["id"], "additionalProperties": false };
const schema16 = { "type": "object", "properties": { "manifest": { "type": "string" } }, "additionalProperties": true };
function validate48(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.manifest !== undefined) {
        let data0 = data.manifest;
        if (typeof data0 !== "string") {
            const err0 = { instancePath: instancePath + "/manifest", schemaPath: "#/properties/manifest/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema16.properties.manifest.type, parentSchema: schema16.properties.manifest, data: data0 };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
}
else {
    const err1 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema16.type, parentSchema: schema16, data };
    if (vErrors === null) {
        vErrors = [err1];
    }
    else {
        vErrors.push(err1);
    }
    errors++;
} validate48.errors = vErrors; return errors === 0; }
const schema17 = { "type": "object", "oneOf": [{ "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "intent_to_retain": { "type": "boolean" }, "filter": { "$ref": "http://json-schema.org/schema#" }, "name": { "type": "string" } }, "required": ["path"], "additionalProperties": false }, { "properties": { "id": { "type": "string" }, "path": { "type": "array", "items": { "type": "string" } }, "purpose": { "type": "string" }, "intent_to_retain": { "type": "boolean" }, "filter": { "$ref": "http://json-schema.org/schema#" }, "predicate": { "type": "string", "enum": ["required", "preferred"] }, "name": { "type": "string" } }, "required": ["path", "filter", "predicate"], "additionalProperties": false }] };
const schema6 = { "$schema": "http://json-schema.org/draft-07/schema#", "$id": "http://json-schema.org/draft-07/schema#", "title": "Core schema meta-schema", "definitions": { "schemaArray": { "type": "array", "minItems": 1, "items": { "$ref": "#" } }, "nonNegativeInteger": { "type": "integer", "minimum": 0 }, "nonNegativeIntegerDefault0": { "allOf": [{ "$ref": "#/definitions/nonNegativeInteger" }, { "default": 0 }] }, "simpleTypes": { "enum": ["array", "boolean", "integer", "null", "number", "object", "string"] }, "stringArray": { "type": "array", "items": { "type": "string" }, "uniqueItems": true, "default": [] } }, "type": ["object", "boolean"], "properties": { "$id": { "type": "string", "format": "uri-reference" }, "$schema": { "type": "string", "format": "uri" }, "$ref": { "type": "string", "format": "uri-reference" }, "$comment": { "type": "string" }, "title": { "type": "string" }, "description": { "type": "string" }, "default": true, "readOnly": { "type": "boolean", "default": false }, "examples": { "type": "array", "items": true }, "multipleOf": { "type": "number", "exclusiveMinimum": 0 }, "maximum": { "type": "number" }, "exclusiveMaximum": { "type": "number" }, "minimum": { "type": "number" }, "exclusiveMinimum": { "type": "number" }, "maxLength": { "$ref": "#/definitions/nonNegativeInteger" }, "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }, "pattern": { "type": "string", "format": "regex" }, "additionalItems": { "$ref": "#" }, "items": { "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/schemaArray" }], "default": true }, "maxItems": { "$ref": "#/definitions/nonNegativeInteger" }, "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }, "uniqueItems": { "type": "boolean", "default": false }, "contains": { "$ref": "#" }, "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" }, "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" }, "required": { "$ref": "#/definitions/stringArray" }, "additionalProperties": { "$ref": "#" }, "definitions": { "type": "object", "additionalProperties": { "$ref": "#" }, "default": {} }, "properties": { "type": "object", "additionalProperties": { "$ref": "#" }, "default": {} }, "patternProperties": { "type": "object", "additionalProperties": { "$ref": "#" }, "propertyNames": { "format": "regex" }, "default": {} }, "dependencies": { "type": "object", "additionalProperties": { "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }] } }, "propertyNames": { "$ref": "#" }, "const": true, "enum": { "type": "array", "items": true, "minItems": 1, "uniqueItems": true }, "type": { "anyOf": [{ "$ref": "#/definitions/simpleTypes" }, { "type": "array", "items": { "$ref": "#/definitions/simpleTypes" }, "minItems": 1, "uniqueItems": true }] }, "format": { "type": "string" }, "contentMediaType": { "type": "string" }, "contentEncoding": { "type": "string" }, "if": { "$ref": "#" }, "then": { "$ref": "#" }, "else": { "$ref": "#" }, "allOf": { "$ref": "#/definitions/schemaArray" }, "anyOf": { "$ref": "#/definitions/schemaArray" }, "oneOf": { "$ref": "#/definitions/schemaArray" }, "not": { "$ref": "#" } }, "default": true };
const schema7 = { "type": "integer", "minimum": 0 };
function validate22(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!((typeof data == "number") && (!(data % 1) && !isNaN(data)))) {
    const err0 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "integer" }, message: "must be integer", schema: schema7.type, parentSchema: schema7, data };
    if (vErrors === null) {
        vErrors = [err0];
    }
    else {
        vErrors.push(err0);
    }
    errors++;
} if (typeof data == "number") {
    if (data < 0 || isNaN(data)) {
        const err1 = { instancePath, schemaPath: "#/minimum", keyword: "minimum", params: { comparison: ">=", limit: 0 }, message: "must be >= 0", schema: 0, parentSchema: schema7, data };
        if (vErrors === null) {
            vErrors = [err1];
        }
        else {
            vErrors.push(err1);
        }
        errors++;
    }
} validate22.errors = vErrors; return errors === 0; }
const schema8 = { "allOf": [{ "$ref": "#/definitions/nonNegativeInteger" }, { "default": 0 }] };
function validate24(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(validate22(data, { instancePath, parentData, parentDataProperty, rootData }))) {
    vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
    errors = vErrors.length;
} validate24.errors = vErrors; return errors === 0; }
const schema9 = { "type": "array", "minItems": 1, "items": { "$ref": "#" } };
const root1 = { validate: validate21 };
function validate27(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (Array.isArray(data)) {
    if (data.length < 1) {
        const err0 = { instancePath, schemaPath: "#/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema9, data };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    const len0 = data.length;
    for (let i0 = 0; i0 < len0; i0++) {
        if (!(root1.validate(data[i0], { instancePath: instancePath + "/" + i0, parentData: data, parentDataProperty: i0, rootData }))) {
            vErrors = vErrors === null ? root1.validate.errors : vErrors.concat(root1.validate.errors);
            errors = vErrors.length;
        }
    }
}
else {
    const err1 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema9.type, parentSchema: schema9, data };
    if (vErrors === null) {
        vErrors = [err1];
    }
    else {
        vErrors.push(err1);
    }
    errors++;
} validate27.errors = vErrors; return errors === 0; }
const schema10 = { "type": "array", "items": { "type": "string" }, "uniqueItems": true, "default": [] };
function validate33(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (Array.isArray(data)) {
    const len0 = data.length;
    for (let i0 = 0; i0 < len0; i0++) {
        let data0 = data[i0];
        if (typeof data0 !== "string") {
            const err0 = { instancePath: instancePath + "/" + i0, schemaPath: "#/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema10.items.type, parentSchema: schema10.items, data: data0 };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
    let i1 = data.length;
    let j0;
    if (i1 > 1) {
        const indices0 = {};
        for (; i1--;) {
            let item0 = data[i1];
            if (typeof item0 !== "string") {
                continue;
            }
            if (typeof indices0[item0] == "number") {
                j0 = indices0[item0];
                const err1 = { instancePath, schemaPath: "#/uniqueItems", keyword: "uniqueItems", params: { i: i1, j: j0 }, message: "must NOT have duplicate items (items ## " + j0 + " and " + i1 + " are identical)", schema: true, parentSchema: schema10, data };
                if (vErrors === null) {
                    vErrors = [err1];
                }
                else {
                    vErrors.push(err1);
                }
                errors++;
                break;
            }
            indices0[item0] = i1;
        }
    }
}
else {
    const err2 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema10.type, parentSchema: schema10, data };
    if (vErrors === null) {
        vErrors = [err2];
    }
    else {
        vErrors.push(err2);
    }
    errors++;
} validate33.errors = vErrors; return errors === 0; }
const schema11 = { "enum": ["array", "boolean", "integer", "null", "number", "object", "string"] };
function validate36(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(((((((data === "array") || (data === "boolean")) || (data === "integer")) || (data === "null")) || (data === "number")) || (data === "object")) || (data === "string"))) {
    const err0 = { instancePath, schemaPath: "#/enum", keyword: "enum", params: { allowedValues: schema11.enum }, message: "must be equal to one of the allowed values", schema: schema11.enum, parentSchema: schema11, data };
    if (vErrors === null) {
        vErrors = [err0];
    }
    else {
        vErrors.push(err0);
    }
    errors++;
} validate36.errors = vErrors; return errors === 0; }
const func0 = require("ajv/dist/runtime/equal").default;
function validate21(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="http://json-schema.org/draft-07/schema#" */ ; let vErrors = null; let errors = 0; if ((!(data && typeof data == "object" && !Array.isArray(data))) && (typeof data !== "boolean")) {
    const err0 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: schema6.type }, message: "must be object,boolean", schema: schema6.type, parentSchema: schema6, data };
    if (vErrors === null) {
        vErrors = [err0];
    }
    else {
        vErrors.push(err0);
    }
    errors++;
} if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.$id !== undefined) {
        let data0 = data.$id;
        if (!(typeof data0 === "string")) {
            const err1 = { instancePath: instancePath + "/$id", schemaPath: "#/properties/%24id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.$id.type, parentSchema: schema6.properties.$id, data: data0 };
            if (vErrors === null) {
                vErrors = [err1];
            }
            else {
                vErrors.push(err1);
            }
            errors++;
        }
    }
    if (data.$schema !== undefined) {
        let data1 = data.$schema;
        if (!(typeof data1 === "string")) {
            const err2 = { instancePath: instancePath + "/$schema", schemaPath: "#/properties/%24schema/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.$schema.type, parentSchema: schema6.properties.$schema, data: data1 };
            if (vErrors === null) {
                vErrors = [err2];
            }
            else {
                vErrors.push(err2);
            }
            errors++;
        }
    }
    if (data.$ref !== undefined) {
        let data2 = data.$ref;
        if (!(typeof data2 === "string")) {
            const err3 = { instancePath: instancePath + "/$ref", schemaPath: "#/properties/%24ref/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.$ref.type, parentSchema: schema6.properties.$ref, data: data2 };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.$comment !== undefined) {
        let data3 = data.$comment;
        if (typeof data3 !== "string") {
            const err4 = { instancePath: instancePath + "/$comment", schemaPath: "#/properties/%24comment/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.$comment.type, parentSchema: schema6.properties.$comment, data: data3 };
            if (vErrors === null) {
                vErrors = [err4];
            }
            else {
                vErrors.push(err4);
            }
            errors++;
        }
    }
    if (data.title !== undefined) {
        let data4 = data.title;
        if (typeof data4 !== "string") {
            const err5 = { instancePath: instancePath + "/title", schemaPath: "#/properties/title/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.title.type, parentSchema: schema6.properties.title, data: data4 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.description !== undefined) {
        let data5 = data.description;
        if (typeof data5 !== "string") {
            const err6 = { instancePath: instancePath + "/description", schemaPath: "#/properties/description/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.description.type, parentSchema: schema6.properties.description, data: data5 };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
    }
    if (data.readOnly !== undefined) {
        let data6 = data.readOnly;
        if (typeof data6 !== "boolean") {
            const err7 = { instancePath: instancePath + "/readOnly", schemaPath: "#/properties/readOnly/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean", schema: schema6.properties.readOnly.type, parentSchema: schema6.properties.readOnly, data: data6 };
            if (vErrors === null) {
                vErrors = [err7];
            }
            else {
                vErrors.push(err7);
            }
            errors++;
        }
    }
    if (data.examples !== undefined) {
        let data7 = data.examples;
        if (!(Array.isArray(data7))) {
            const err8 = { instancePath: instancePath + "/examples", schemaPath: "#/properties/examples/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema6.properties.examples.type, parentSchema: schema6.properties.examples, data: data7 };
            if (vErrors === null) {
                vErrors = [err8];
            }
            else {
                vErrors.push(err8);
            }
            errors++;
        }
    }
    if (data.multipleOf !== undefined) {
        let data8 = data.multipleOf;
        if (typeof data8 == "number") {
            if (data8 <= 0 || isNaN(data8)) {
                const err9 = { instancePath: instancePath + "/multipleOf", schemaPath: "#/properties/multipleOf/exclusiveMinimum", keyword: "exclusiveMinimum", params: { comparison: ">", limit: 0 }, message: "must be > 0", schema: 0, parentSchema: schema6.properties.multipleOf, data: data8 };
                if (vErrors === null) {
                    vErrors = [err9];
                }
                else {
                    vErrors.push(err9);
                }
                errors++;
            }
        }
        else {
            const err10 = { instancePath: instancePath + "/multipleOf", schemaPath: "#/properties/multipleOf/type", keyword: "type", params: { type: "number" }, message: "must be number", schema: schema6.properties.multipleOf.type, parentSchema: schema6.properties.multipleOf, data: data8 };
            if (vErrors === null) {
                vErrors = [err10];
            }
            else {
                vErrors.push(err10);
            }
            errors++;
        }
    }
    if (data.maximum !== undefined) {
        let data9 = data.maximum;
        if (!(typeof data9 == "number")) {
            const err11 = { instancePath: instancePath + "/maximum", schemaPath: "#/properties/maximum/type", keyword: "type", params: { type: "number" }, message: "must be number", schema: schema6.properties.maximum.type, parentSchema: schema6.properties.maximum, data: data9 };
            if (vErrors === null) {
                vErrors = [err11];
            }
            else {
                vErrors.push(err11);
            }
            errors++;
        }
    }
    if (data.exclusiveMaximum !== undefined) {
        let data10 = data.exclusiveMaximum;
        if (!(typeof data10 == "number")) {
            const err12 = { instancePath: instancePath + "/exclusiveMaximum", schemaPath: "#/properties/exclusiveMaximum/type", keyword: "type", params: { type: "number" }, message: "must be number", schema: schema6.properties.exclusiveMaximum.type, parentSchema: schema6.properties.exclusiveMaximum, data: data10 };
            if (vErrors === null) {
                vErrors = [err12];
            }
            else {
                vErrors.push(err12);
            }
            errors++;
        }
    }
    if (data.minimum !== undefined) {
        let data11 = data.minimum;
        if (!(typeof data11 == "number")) {
            const err13 = { instancePath: instancePath + "/minimum", schemaPath: "#/properties/minimum/type", keyword: "type", params: { type: "number" }, message: "must be number", schema: schema6.properties.minimum.type, parentSchema: schema6.properties.minimum, data: data11 };
            if (vErrors === null) {
                vErrors = [err13];
            }
            else {
                vErrors.push(err13);
            }
            errors++;
        }
    }
    if (data.exclusiveMinimum !== undefined) {
        let data12 = data.exclusiveMinimum;
        if (!(typeof data12 == "number")) {
            const err14 = { instancePath: instancePath + "/exclusiveMinimum", schemaPath: "#/properties/exclusiveMinimum/type", keyword: "type", params: { type: "number" }, message: "must be number", schema: schema6.properties.exclusiveMinimum.type, parentSchema: schema6.properties.exclusiveMinimum, data: data12 };
            if (vErrors === null) {
                vErrors = [err14];
            }
            else {
                vErrors.push(err14);
            }
            errors++;
        }
    }
    if (data.maxLength !== undefined) {
        if (!(validate22(data.maxLength, { instancePath: instancePath + "/maxLength", parentData: data, parentDataProperty: "maxLength", rootData }))) {
            vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
            errors = vErrors.length;
        }
    }
    if (data.minLength !== undefined) {
        if (!(validate24(data.minLength, { instancePath: instancePath + "/minLength", parentData: data, parentDataProperty: "minLength", rootData }))) {
            vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
            errors = vErrors.length;
        }
    }
    if (data.pattern !== undefined) {
        let data15 = data.pattern;
        if (!(typeof data15 === "string")) {
            const err15 = { instancePath: instancePath + "/pattern", schemaPath: "#/properties/pattern/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.pattern.type, parentSchema: schema6.properties.pattern, data: data15 };
            if (vErrors === null) {
                vErrors = [err15];
            }
            else {
                vErrors.push(err15);
            }
            errors++;
        }
    }
    if (data.additionalItems !== undefined) {
        if (!(validate21(data.additionalItems, { instancePath: instancePath + "/additionalItems", parentData: data, parentDataProperty: "additionalItems", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.items !== undefined) {
        let data17 = data.items;
        const _errs33 = errors;
        let valid1 = false;
        const _errs34 = errors;
        if (!(validate21(data17, { instancePath: instancePath + "/items", parentData: data, parentDataProperty: "items", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
        var _valid0 = _errs34 === errors;
        valid1 = valid1 || _valid0;
        if (!valid1) {
            const _errs35 = errors;
            if (!(validate27(data17, { instancePath: instancePath + "/items", parentData: data, parentDataProperty: "items", rootData }))) {
                vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
                errors = vErrors.length;
            }
            var _valid0 = _errs35 === errors;
            valid1 = valid1 || _valid0;
        }
        if (!valid1) {
            const err16 = { instancePath: instancePath + "/items", schemaPath: "#/properties/items/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf", schema: schema6.properties.items.anyOf, parentSchema: schema6.properties.items, data: data17 };
            if (vErrors === null) {
                vErrors = [err16];
            }
            else {
                vErrors.push(err16);
            }
            errors++;
        }
        else {
            errors = _errs33;
            if (vErrors !== null) {
                if (_errs33) {
                    vErrors.length = _errs33;
                }
                else {
                    vErrors = null;
                }
            }
        }
    }
    if (data.maxItems !== undefined) {
        if (!(validate22(data.maxItems, { instancePath: instancePath + "/maxItems", parentData: data, parentDataProperty: "maxItems", rootData }))) {
            vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
            errors = vErrors.length;
        }
    }
    if (data.minItems !== undefined) {
        if (!(validate24(data.minItems, { instancePath: instancePath + "/minItems", parentData: data, parentDataProperty: "minItems", rootData }))) {
            vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
            errors = vErrors.length;
        }
    }
    if (data.uniqueItems !== undefined) {
        let data20 = data.uniqueItems;
        if (typeof data20 !== "boolean") {
            const err17 = { instancePath: instancePath + "/uniqueItems", schemaPath: "#/properties/uniqueItems/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean", schema: schema6.properties.uniqueItems.type, parentSchema: schema6.properties.uniqueItems, data: data20 };
            if (vErrors === null) {
                vErrors = [err17];
            }
            else {
                vErrors.push(err17);
            }
            errors++;
        }
    }
    if (data.contains !== undefined) {
        if (!(validate21(data.contains, { instancePath: instancePath + "/contains", parentData: data, parentDataProperty: "contains", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.maxProperties !== undefined) {
        if (!(validate22(data.maxProperties, { instancePath: instancePath + "/maxProperties", parentData: data, parentDataProperty: "maxProperties", rootData }))) {
            vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
            errors = vErrors.length;
        }
    }
    if (data.minProperties !== undefined) {
        if (!(validate24(data.minProperties, { instancePath: instancePath + "/minProperties", parentData: data, parentDataProperty: "minProperties", rootData }))) {
            vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
            errors = vErrors.length;
        }
    }
    if (data.required !== undefined) {
        if (!(validate33(data.required, { instancePath: instancePath + "/required", parentData: data, parentDataProperty: "required", rootData }))) {
            vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
            errors = vErrors.length;
        }
    }
    if (data.additionalProperties !== undefined) {
        if (!(validate21(data.additionalProperties, { instancePath: instancePath + "/additionalProperties", parentData: data, parentDataProperty: "additionalProperties", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.definitions !== undefined) {
        let data26 = data.definitions;
        if (data26 && typeof data26 == "object" && !Array.isArray(data26)) {
            for (const key0 in data26) {
                if (!(validate21(data26[key0], { instancePath: instancePath + "/definitions/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data26, parentDataProperty: key0, rootData }))) {
                    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err18 = { instancePath: instancePath + "/definitions", schemaPath: "#/properties/definitions/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema6.properties.definitions.type, parentSchema: schema6.properties.definitions, data: data26 };
            if (vErrors === null) {
                vErrors = [err18];
            }
            else {
                vErrors.push(err18);
            }
            errors++;
        }
    }
    if (data.properties !== undefined) {
        let data28 = data.properties;
        if (data28 && typeof data28 == "object" && !Array.isArray(data28)) {
            for (const key1 in data28) {
                if (!(validate21(data28[key1], { instancePath: instancePath + "/properties/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data28, parentDataProperty: key1, rootData }))) {
                    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err19 = { instancePath: instancePath + "/properties", schemaPath: "#/properties/properties/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema6.properties.properties.type, parentSchema: schema6.properties.properties, data: data28 };
            if (vErrors === null) {
                vErrors = [err19];
            }
            else {
                vErrors.push(err19);
            }
            errors++;
        }
    }
    if (data.patternProperties !== undefined) {
        let data30 = data.patternProperties;
        if (data30 && typeof data30 == "object" && !Array.isArray(data30)) {
            for (const key2 in data30) {
                const _errs55 = errors;
                var valid4 = _errs55 === errors;
                if (!valid4) {
                    const err20 = { instancePath: instancePath + "/patternProperties", schemaPath: "#/properties/patternProperties/propertyNames", keyword: "propertyNames", params: { propertyName: key2 }, message: "property name must be valid", schema: schema6.properties.patternProperties.propertyNames, parentSchema: schema6.properties.patternProperties, data: data30 };
                    if (vErrors === null) {
                        vErrors = [err20];
                    }
                    else {
                        vErrors.push(err20);
                    }
                    errors++;
                }
            }
            for (const key3 in data30) {
                if (!(validate21(data30[key3], { instancePath: instancePath + "/patternProperties/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data30, parentDataProperty: key3, rootData }))) {
                    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err21 = { instancePath: instancePath + "/patternProperties", schemaPath: "#/properties/patternProperties/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema6.properties.patternProperties.type, parentSchema: schema6.properties.patternProperties, data: data30 };
            if (vErrors === null) {
                vErrors = [err21];
            }
            else {
                vErrors.push(err21);
            }
            errors++;
        }
    }
    if (data.dependencies !== undefined) {
        let data32 = data.dependencies;
        if (data32 && typeof data32 == "object" && !Array.isArray(data32)) {
            for (const key4 in data32) {
                let data33 = data32[key4];
                const _errs62 = errors;
                let valid7 = false;
                const _errs63 = errors;
                if (!(validate21(data33, { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data32, parentDataProperty: key4, rootData }))) {
                    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
                    errors = vErrors.length;
                }
                var _valid1 = _errs63 === errors;
                valid7 = valid7 || _valid1;
                if (!valid7) {
                    const _errs64 = errors;
                    if (!(validate33(data33, { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), parentData: data32, parentDataProperty: key4, rootData }))) {
                        vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
                        errors = vErrors.length;
                    }
                    var _valid1 = _errs64 === errors;
                    valid7 = valid7 || _valid1;
                }
                if (!valid7) {
                    const err22 = { instancePath: instancePath + "/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"), schemaPath: "#/properties/dependencies/additionalProperties/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf", schema: schema6.properties.dependencies.additionalProperties.anyOf, parentSchema: schema6.properties.dependencies.additionalProperties, data: data33 };
                    if (vErrors === null) {
                        vErrors = [err22];
                    }
                    else {
                        vErrors.push(err22);
                    }
                    errors++;
                }
                else {
                    errors = _errs62;
                    if (vErrors !== null) {
                        if (_errs62) {
                            vErrors.length = _errs62;
                        }
                        else {
                            vErrors = null;
                        }
                    }
                }
            }
        }
        else {
            const err23 = { instancePath: instancePath + "/dependencies", schemaPath: "#/properties/dependencies/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema6.properties.dependencies.type, parentSchema: schema6.properties.dependencies, data: data32 };
            if (vErrors === null) {
                vErrors = [err23];
            }
            else {
                vErrors.push(err23);
            }
            errors++;
        }
    }
    if (data.propertyNames !== undefined) {
        if (!(validate21(data.propertyNames, { instancePath: instancePath + "/propertyNames", parentData: data, parentDataProperty: "propertyNames", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.enum !== undefined) {
        let data35 = data.enum;
        if (Array.isArray(data35)) {
            if (data35.length < 1) {
                const err24 = { instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema6.properties.enum, data: data35 };
                if (vErrors === null) {
                    vErrors = [err24];
                }
                else {
                    vErrors.push(err24);
                }
                errors++;
            }
            let i0 = data35.length;
            let j0;
            if (i0 > 1) {
                outer0: for (; i0--;) {
                    for (j0 = i0; j0--;) {
                        if (func0(data35[i0], data35[j0])) {
                            const err25 = { instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/uniqueItems", keyword: "uniqueItems", params: { i: i0, j: j0 }, message: "must NOT have duplicate items (items ## " + j0 + " and " + i0 + " are identical)", schema: true, parentSchema: schema6.properties.enum, data: data35 };
                            if (vErrors === null) {
                                vErrors = [err25];
                            }
                            else {
                                vErrors.push(err25);
                            }
                            errors++;
                            break outer0;
                        }
                    }
                }
            }
        }
        else {
            const err26 = { instancePath: instancePath + "/enum", schemaPath: "#/properties/enum/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema6.properties.enum.type, parentSchema: schema6.properties.enum, data: data35 };
            if (vErrors === null) {
                vErrors = [err26];
            }
            else {
                vErrors.push(err26);
            }
            errors++;
        }
    }
    if (data.type !== undefined) {
        let data36 = data.type;
        const _errs69 = errors;
        let valid9 = false;
        const _errs70 = errors;
        if (!(validate36(data36, { instancePath: instancePath + "/type", parentData: data, parentDataProperty: "type", rootData }))) {
            vErrors = vErrors === null ? validate36.errors : vErrors.concat(validate36.errors);
            errors = vErrors.length;
        }
        var _valid2 = _errs70 === errors;
        valid9 = valid9 || _valid2;
        if (!valid9) {
            const _errs71 = errors;
            if (Array.isArray(data36)) {
                if (data36.length < 1) {
                    const err27 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/minItems", keyword: "minItems", params: { limit: 1 }, message: "must NOT have fewer than 1 items", schema: 1, parentSchema: schema6.properties.type.anyOf[1], data: data36 };
                    if (vErrors === null) {
                        vErrors = [err27];
                    }
                    else {
                        vErrors.push(err27);
                    }
                    errors++;
                }
                const len0 = data36.length;
                for (let i1 = 0; i1 < len0; i1++) {
                    if (!(validate36(data36[i1], { instancePath: instancePath + "/type/" + i1, parentData: data36, parentDataProperty: i1, rootData }))) {
                        vErrors = vErrors === null ? validate36.errors : vErrors.concat(validate36.errors);
                        errors = vErrors.length;
                    }
                }
                let i2 = data36.length;
                let j1;
                if (i2 > 1) {
                    outer1: for (; i2--;) {
                        for (j1 = i2; j1--;) {
                            if (func0(data36[i2], data36[j1])) {
                                const err28 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/uniqueItems", keyword: "uniqueItems", params: { i: i2, j: j1 }, message: "must NOT have duplicate items (items ## " + j1 + " and " + i2 + " are identical)", schema: true, parentSchema: schema6.properties.type.anyOf[1], data: data36 };
                                if (vErrors === null) {
                                    vErrors = [err28];
                                }
                                else {
                                    vErrors.push(err28);
                                }
                                errors++;
                                break outer1;
                            }
                        }
                    }
                }
            }
            else {
                const err29 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema6.properties.type.anyOf[1].type, parentSchema: schema6.properties.type.anyOf[1], data: data36 };
                if (vErrors === null) {
                    vErrors = [err29];
                }
                else {
                    vErrors.push(err29);
                }
                errors++;
            }
            var _valid2 = _errs71 === errors;
            valid9 = valid9 || _valid2;
        }
        if (!valid9) {
            const err30 = { instancePath: instancePath + "/type", schemaPath: "#/properties/type/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf", schema: schema6.properties.type.anyOf, parentSchema: schema6.properties.type, data: data36 };
            if (vErrors === null) {
                vErrors = [err30];
            }
            else {
                vErrors.push(err30);
            }
            errors++;
        }
        else {
            errors = _errs69;
            if (vErrors !== null) {
                if (_errs69) {
                    vErrors.length = _errs69;
                }
                else {
                    vErrors = null;
                }
            }
        }
    }
    if (data.format !== undefined) {
        let data38 = data.format;
        if (typeof data38 !== "string") {
            const err31 = { instancePath: instancePath + "/format", schemaPath: "#/properties/format/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.format.type, parentSchema: schema6.properties.format, data: data38 };
            if (vErrors === null) {
                vErrors = [err31];
            }
            else {
                vErrors.push(err31);
            }
            errors++;
        }
    }
    if (data.contentMediaType !== undefined) {
        let data39 = data.contentMediaType;
        if (typeof data39 !== "string") {
            const err32 = { instancePath: instancePath + "/contentMediaType", schemaPath: "#/properties/contentMediaType/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.contentMediaType.type, parentSchema: schema6.properties.contentMediaType, data: data39 };
            if (vErrors === null) {
                vErrors = [err32];
            }
            else {
                vErrors.push(err32);
            }
            errors++;
        }
    }
    if (data.contentEncoding !== undefined) {
        let data40 = data.contentEncoding;
        if (typeof data40 !== "string") {
            const err33 = { instancePath: instancePath + "/contentEncoding", schemaPath: "#/properties/contentEncoding/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema6.properties.contentEncoding.type, parentSchema: schema6.properties.contentEncoding, data: data40 };
            if (vErrors === null) {
                vErrors = [err33];
            }
            else {
                vErrors.push(err33);
            }
            errors++;
        }
    }
    if (data.if !== undefined) {
        if (!(validate21(data.if, { instancePath: instancePath + "/if", parentData: data, parentDataProperty: "if", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.then !== undefined) {
        if (!(validate21(data.then, { instancePath: instancePath + "/then", parentData: data, parentDataProperty: "then", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.else !== undefined) {
        if (!(validate21(data.else, { instancePath: instancePath + "/else", parentData: data, parentDataProperty: "else", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.allOf !== undefined) {
        if (!(validate27(data.allOf, { instancePath: instancePath + "/allOf", parentData: data, parentDataProperty: "allOf", rootData }))) {
            vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
            errors = vErrors.length;
        }
    }
    if (data.anyOf !== undefined) {
        if (!(validate27(data.anyOf, { instancePath: instancePath + "/anyOf", parentData: data, parentDataProperty: "anyOf", rootData }))) {
            vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
            errors = vErrors.length;
        }
    }
    if (data.oneOf !== undefined) {
        if (!(validate27(data.oneOf, { instancePath: instancePath + "/oneOf", parentData: data, parentDataProperty: "oneOf", rootData }))) {
            vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);
            errors = vErrors.length;
        }
    }
    if (data.not !== undefined) {
        if (!(validate21(data.not, { instancePath: instancePath + "/not", parentData: data, parentDataProperty: "not", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
} validate21.errors = vErrors; return errors === 0; }
function validate51(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    const err0 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema17.type, parentSchema: schema17, data };
    if (vErrors === null) {
        vErrors = [err0];
    }
    else {
        vErrors.push(err0);
    }
    errors++;
} const _errs1 = errors; let valid0 = false; let passing0 = null; const _errs2 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.path === undefined) {
        const err1 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: "path" }, message: "must have required property '" + "path" + "'", schema: schema17.oneOf[0].required, parentSchema: schema17.oneOf[0], data };
        if (vErrors === null) {
            vErrors = [err1];
        }
        else {
            vErrors.push(err1);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!((((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "intent_to_retain")) || (key0 === "filter")) || (key0 === "name"))) {
            const err2 = { instancePath, schemaPath: "#/oneOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema17.oneOf[0], data };
            if (vErrors === null) {
                vErrors = [err2];
            }
            else {
                vErrors.push(err2);
            }
            errors++;
        }
    }
    if (data.id !== undefined) {
        let data0 = data.id;
        if (typeof data0 !== "string") {
            const err3 = { instancePath: instancePath + "/id", schemaPath: "#/oneOf/0/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[0].properties.id.type, parentSchema: schema17.oneOf[0].properties.id, data: data0 };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.path !== undefined) {
        let data1 = data.path;
        if (Array.isArray(data1)) {
            const len0 = data1.length;
            for (let i0 = 0; i0 < len0; i0++) {
                let data2 = data1[i0];
                if (typeof data2 !== "string") {
                    const err4 = { instancePath: instancePath + "/path/" + i0, schemaPath: "#/oneOf/0/properties/path/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[0].properties.path.items.type, parentSchema: schema17.oneOf[0].properties.path.items, data: data2 };
                    if (vErrors === null) {
                        vErrors = [err4];
                    }
                    else {
                        vErrors.push(err4);
                    }
                    errors++;
                }
            }
        }
        else {
            const err5 = { instancePath: instancePath + "/path", schemaPath: "#/oneOf/0/properties/path/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema17.oneOf[0].properties.path.type, parentSchema: schema17.oneOf[0].properties.path, data: data1 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data3 = data.purpose;
        if (typeof data3 !== "string") {
            const err6 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/0/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[0].properties.purpose.type, parentSchema: schema17.oneOf[0].properties.purpose, data: data3 };
            if (vErrors === null) {
                vErrors = [err6];
            }
            else {
                vErrors.push(err6);
            }
            errors++;
        }
    }
    if (data.intent_to_retain !== undefined) {
        let data4 = data.intent_to_retain;
        if (typeof data4 !== "boolean") {
            const err7 = { instancePath: instancePath + "/intent_to_retain", schemaPath: "#/oneOf/0/properties/intent_to_retain/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean", schema: schema17.oneOf[0].properties.intent_to_retain.type, parentSchema: schema17.oneOf[0].properties.intent_to_retain, data: data4 };
            if (vErrors === null) {
                vErrors = [err7];
            }
            else {
                vErrors.push(err7);
            }
            errors++;
        }
    }
    if (data.filter !== undefined) {
        if (!(validate21(data.filter, { instancePath: instancePath + "/filter", parentData: data, parentDataProperty: "filter", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.name !== undefined) {
        let data6 = data.name;
        if (typeof data6 !== "string") {
            const err8 = { instancePath: instancePath + "/name", schemaPath: "#/oneOf/0/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[0].properties.name.type, parentSchema: schema17.oneOf[0].properties.name, data: data6 };
            if (vErrors === null) {
                vErrors = [err8];
            }
            else {
                vErrors.push(err8);
            }
            errors++;
        }
    }
} var _valid0 = _errs2 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs17 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.path === undefined) {
        const err9 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "path" }, message: "must have required property '" + "path" + "'", schema: schema17.oneOf[1].required, parentSchema: schema17.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err9];
        }
        else {
            vErrors.push(err9);
        }
        errors++;
    }
    if (data.filter === undefined) {
        const err10 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "filter" }, message: "must have required property '" + "filter" + "'", schema: schema17.oneOf[1].required, parentSchema: schema17.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err10];
        }
        else {
            vErrors.push(err10);
        }
        errors++;
    }
    if (data.predicate === undefined) {
        const err11 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: "predicate" }, message: "must have required property '" + "predicate" + "'", schema: schema17.oneOf[1].required, parentSchema: schema17.oneOf[1], data };
        if (vErrors === null) {
            vErrors = [err11];
        }
        else {
            vErrors.push(err11);
        }
        errors++;
    }
    for (const key1 in data) {
        if (!(((((((key1 === "id") || (key1 === "path")) || (key1 === "purpose")) || (key1 === "intent_to_retain")) || (key1 === "filter")) || (key1 === "predicate")) || (key1 === "name"))) {
            const err12 = { instancePath, schemaPath: "#/oneOf/1/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties", schema: false, parentSchema: schema17.oneOf[1], data };
            if (vErrors === null) {
                vErrors = [err12];
            }
            else {
                vErrors.push(err12);
            }
            errors++;
        }
    }
    if (data.id !== undefined) {
        let data7 = data.id;
        if (typeof data7 !== "string") {
            const err13 = { instancePath: instancePath + "/id", schemaPath: "#/oneOf/1/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[1].properties.id.type, parentSchema: schema17.oneOf[1].properties.id, data: data7 };
            if (vErrors === null) {
                vErrors = [err13];
            }
            else {
                vErrors.push(err13);
            }
            errors++;
        }
    }
    if (data.path !== undefined) {
        let data8 = data.path;
        if (Array.isArray(data8)) {
            const len1 = data8.length;
            for (let i1 = 0; i1 < len1; i1++) {
                let data9 = data8[i1];
                if (typeof data9 !== "string") {
                    const err14 = { instancePath: instancePath + "/path/" + i1, schemaPath: "#/oneOf/1/properties/path/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[1].properties.path.items.type, parentSchema: schema17.oneOf[1].properties.path.items, data: data9 };
                    if (vErrors === null) {
                        vErrors = [err14];
                    }
                    else {
                        vErrors.push(err14);
                    }
                    errors++;
                }
            }
        }
        else {
            const err15 = { instancePath: instancePath + "/path", schemaPath: "#/oneOf/1/properties/path/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema17.oneOf[1].properties.path.type, parentSchema: schema17.oneOf[1].properties.path, data: data8 };
            if (vErrors === null) {
                vErrors = [err15];
            }
            else {
                vErrors.push(err15);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data10 = data.purpose;
        if (typeof data10 !== "string") {
            const err16 = { instancePath: instancePath + "/purpose", schemaPath: "#/oneOf/1/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[1].properties.purpose.type, parentSchema: schema17.oneOf[1].properties.purpose, data: data10 };
            if (vErrors === null) {
                vErrors = [err16];
            }
            else {
                vErrors.push(err16);
            }
            errors++;
        }
    }
    if (data.intent_to_retain !== undefined) {
        let data11 = data.intent_to_retain;
        if (typeof data11 !== "boolean") {
            const err17 = { instancePath: instancePath + "/intent_to_retain", schemaPath: "#/oneOf/1/properties/intent_to_retain/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean", schema: schema17.oneOf[1].properties.intent_to_retain.type, parentSchema: schema17.oneOf[1].properties.intent_to_retain, data: data11 };
            if (vErrors === null) {
                vErrors = [err17];
            }
            else {
                vErrors.push(err17);
            }
            errors++;
        }
    }
    if (data.filter !== undefined) {
        if (!(validate21(data.filter, { instancePath: instancePath + "/filter", parentData: data, parentDataProperty: "filter", rootData }))) {
            vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
            errors = vErrors.length;
        }
    }
    if (data.predicate !== undefined) {
        let data13 = data.predicate;
        if (typeof data13 !== "string") {
            const err18 = { instancePath: instancePath + "/predicate", schemaPath: "#/oneOf/1/properties/predicate/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[1].properties.predicate.type, parentSchema: schema17.oneOf[1].properties.predicate, data: data13 };
            if (vErrors === null) {
                vErrors = [err18];
            }
            else {
                vErrors.push(err18);
            }
            errors++;
        }
        if (!((data13 === "required") || (data13 === "preferred"))) {
            const err19 = { instancePath: instancePath + "/predicate", schemaPath: "#/oneOf/1/properties/predicate/enum", keyword: "enum", params: { allowedValues: schema17.oneOf[1].properties.predicate.enum }, message: "must be equal to one of the allowed values", schema: schema17.oneOf[1].properties.predicate.enum, parentSchema: schema17.oneOf[1].properties.predicate, data: data13 };
            if (vErrors === null) {
                vErrors = [err19];
            }
            else {
                vErrors.push(err19);
            }
            errors++;
        }
    }
    if (data.name !== undefined) {
        let data14 = data.name;
        if (typeof data14 !== "string") {
            const err20 = { instancePath: instancePath + "/name", schemaPath: "#/oneOf/1/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema17.oneOf[1].properties.name.type, parentSchema: schema17.oneOf[1].properties.name, data: data14 };
            if (vErrors === null) {
                vErrors = [err20];
            }
            else {
                vErrors.push(err20);
            }
            errors++;
        }
    }
} var _valid0 = _errs17 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err21 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf", schema: schema17.oneOf, parentSchema: schema17, data };
    if (vErrors === null) {
        vErrors = [err21];
    }
    else {
        vErrors.push(err21);
    }
    errors++;
}
else {
    errors = _errs1;
    if (vErrors !== null) {
        if (_errs1) {
            vErrors.length = _errs1;
        }
        else {
            vErrors = null;
        }
    }
} validate51.errors = vErrors; return errors === 0; }
function validate47(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.id === undefined) {
        const err0 = { instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: "id" }, message: "must have required property '" + "id" + "'", schema: schema15.required, parentSchema: schema15, data };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    for (const key0 in data) {
        if (!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "issuance")) || (key0 === "group")) || (key0 === "format")) || (key0 === "constraints"))) {
            const err1 = { instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15, data };
            if (vErrors === null) {
                vErrors = [err1];
            }
            else {
                vErrors.push(err1);
            }
            errors++;
        }
    }
    if (data.id !== undefined) {
        let data0 = data.id;
        if (typeof data0 !== "string") {
            const err2 = { instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.id.type, parentSchema: schema15.properties.id, data: data0 };
            if (vErrors === null) {
                vErrors = [err2];
            }
            else {
                vErrors.push(err2);
            }
            errors++;
        }
    }
    if (data.name !== undefined) {
        let data1 = data.name;
        if (typeof data1 !== "string") {
            const err3 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.name.type, parentSchema: schema15.properties.name, data: data1 };
            if (vErrors === null) {
                vErrors = [err3];
            }
            else {
                vErrors.push(err3);
            }
            errors++;
        }
    }
    if (data.purpose !== undefined) {
        let data2 = data.purpose;
        if (typeof data2 !== "string") {
            const err4 = { instancePath: instancePath + "/purpose", schemaPath: "#/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.purpose.type, parentSchema: schema15.properties.purpose, data: data2 };
            if (vErrors === null) {
                vErrors = [err4];
            }
            else {
                vErrors.push(err4);
            }
            errors++;
        }
    }
    if (data.issuance !== undefined) {
        let data3 = data.issuance;
        if (Array.isArray(data3)) {
            const len0 = data3.length;
            for (let i0 = 0; i0 < len0; i0++) {
                if (!(validate48(data3[i0], { instancePath: instancePath + "/issuance/" + i0, parentData: data3, parentDataProperty: i0, rootData }))) {
                    vErrors = vErrors === null ? validate48.errors : vErrors.concat(validate48.errors);
                    errors = vErrors.length;
                }
            }
        }
        else {
            const err5 = { instancePath: instancePath + "/issuance", schemaPath: "#/properties/issuance/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.issuance.type, parentSchema: schema15.properties.issuance, data: data3 };
            if (vErrors === null) {
                vErrors = [err5];
            }
            else {
                vErrors.push(err5);
            }
            errors++;
        }
    }
    if (data.group !== undefined) {
        let data5 = data.group;
        if (Array.isArray(data5)) {
            const len1 = data5.length;
            for (let i1 = 0; i1 < len1; i1++) {
                let data6 = data5[i1];
                if (typeof data6 !== "string") {
                    const err6 = { instancePath: instancePath + "/group/" + i1, schemaPath: "#/properties/group/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.group.items.type, parentSchema: schema15.properties.group.items, data: data6 };
                    if (vErrors === null) {
                        vErrors = [err6];
                    }
                    else {
                        vErrors.push(err6);
                    }
                    errors++;
                }
            }
        }
        else {
            const err7 = { instancePath: instancePath + "/group", schemaPath: "#/properties/group/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.group.type, parentSchema: schema15.properties.group, data: data5 };
            if (vErrors === null) {
                vErrors = [err7];
            }
            else {
                vErrors.push(err7);
            }
            errors++;
        }
    }
    if (data.format !== undefined) {
        if (!(validate43(data.format, { instancePath: instancePath + "/format", parentData: data, parentDataProperty: "format", rootData }))) {
            vErrors = vErrors === null ? validate43.errors : vErrors.concat(validate43.errors);
            errors = vErrors.length;
        }
    }
    if (data.constraints !== undefined) {
        let data8 = data.constraints;
        if (data8 && typeof data8 == "object" && !Array.isArray(data8)) {
            for (const key1 in data8) {
                if (!((((((key1 === "limit_disclosure") || (key1 === "statuses")) || (key1 === "fields")) || (key1 === "subject_is_issuer")) || (key1 === "is_holder")) || (key1 === "same_subject"))) {
                    const err8 = { instancePath: instancePath + "/constraints", schemaPath: "#/properties/constraints/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15.properties.constraints, data: data8 };
                    if (vErrors === null) {
                        vErrors = [err8];
                    }
                    else {
                        vErrors.push(err8);
                    }
                    errors++;
                }
            }
            if (data8.limit_disclosure !== undefined) {
                let data9 = data8.limit_disclosure;
                if (typeof data9 !== "string") {
                    const err9 = { instancePath: instancePath + "/constraints/limit_disclosure", schemaPath: "#/properties/constraints/properties/limit_disclosure/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.limit_disclosure.type, parentSchema: schema15.properties.constraints.properties.limit_disclosure, data: data9 };
                    if (vErrors === null) {
                        vErrors = [err9];
                    }
                    else {
                        vErrors.push(err9);
                    }
                    errors++;
                }
                if (!((data9 === "required") || (data9 === "preferred"))) {
                    const err10 = { instancePath: instancePath + "/constraints/limit_disclosure", schemaPath: "#/properties/constraints/properties/limit_disclosure/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.limit_disclosure.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.limit_disclosure.enum, parentSchema: schema15.properties.constraints.properties.limit_disclosure, data: data9 };
                    if (vErrors === null) {
                        vErrors = [err10];
                    }
                    else {
                        vErrors.push(err10);
                    }
                    errors++;
                }
            }
            if (data8.statuses !== undefined) {
                let data10 = data8.statuses;
                if (data10 && typeof data10 == "object" && !Array.isArray(data10)) {
                    if (data10.active !== undefined) {
                        let data11 = data10.active;
                        if (data11 && typeof data11 == "object" && !Array.isArray(data11)) {
                            if (data11.directive !== undefined) {
                                let data12 = data11.directive;
                                if (typeof data12 !== "string") {
                                    const err11 = { instancePath: instancePath + "/constraints/statuses/active/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/active/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive, data: data12 };
                                    if (vErrors === null) {
                                        vErrors = [err11];
                                    }
                                    else {
                                        vErrors.push(err11);
                                    }
                                    errors++;
                                }
                                if (!(((data12 === "required") || (data12 === "allowed")) || (data12 === "disallowed"))) {
                                    const err12 = { instancePath: instancePath + "/constraints/statuses/active/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/active/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.statuses.properties.active.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.statuses.properties.active.properties.directive, data: data12 };
                                    if (vErrors === null) {
                                        vErrors = [err12];
                                    }
                                    else {
                                        vErrors.push(err12);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err13 = { instancePath: instancePath + "/constraints/statuses/active", schemaPath: "#/properties/constraints/properties/statuses/properties/active/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.properties.active.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.active, data: data11 };
                            if (vErrors === null) {
                                vErrors = [err13];
                            }
                            else {
                                vErrors.push(err13);
                            }
                            errors++;
                        }
                    }
                    if (data10.suspended !== undefined) {
                        let data13 = data10.suspended;
                        if (data13 && typeof data13 == "object" && !Array.isArray(data13)) {
                            if (data13.directive !== undefined) {
                                let data14 = data13.directive;
                                if (typeof data14 !== "string") {
                                    const err14 = { instancePath: instancePath + "/constraints/statuses/suspended/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/suspended/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive, data: data14 };
                                    if (vErrors === null) {
                                        vErrors = [err14];
                                    }
                                    else {
                                        vErrors.push(err14);
                                    }
                                    errors++;
                                }
                                if (!(((data14 === "required") || (data14 === "allowed")) || (data14 === "disallowed"))) {
                                    const err15 = { instancePath: instancePath + "/constraints/statuses/suspended/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/suspended/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.statuses.properties.suspended.properties.directive, data: data14 };
                                    if (vErrors === null) {
                                        vErrors = [err15];
                                    }
                                    else {
                                        vErrors.push(err15);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err16 = { instancePath: instancePath + "/constraints/statuses/suspended", schemaPath: "#/properties/constraints/properties/statuses/properties/suspended/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.properties.suspended.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.suspended, data: data13 };
                            if (vErrors === null) {
                                vErrors = [err16];
                            }
                            else {
                                vErrors.push(err16);
                            }
                            errors++;
                        }
                    }
                    if (data10.revoked !== undefined) {
                        let data15 = data10.revoked;
                        if (data15 && typeof data15 == "object" && !Array.isArray(data15)) {
                            if (data15.directive !== undefined) {
                                let data16 = data15.directive;
                                if (typeof data16 !== "string") {
                                    const err17 = { instancePath: instancePath + "/constraints/statuses/revoked/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/revoked/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive, data: data16 };
                                    if (vErrors === null) {
                                        vErrors = [err17];
                                    }
                                    else {
                                        vErrors.push(err17);
                                    }
                                    errors++;
                                }
                                if (!(((data16 === "required") || (data16 === "allowed")) || (data16 === "disallowed"))) {
                                    const err18 = { instancePath: instancePath + "/constraints/statuses/revoked/directive", schemaPath: "#/properties/constraints/properties/statuses/properties/revoked/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.statuses.properties.revoked.properties.directive, data: data16 };
                                    if (vErrors === null) {
                                        vErrors = [err18];
                                    }
                                    else {
                                        vErrors.push(err18);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err19 = { instancePath: instancePath + "/constraints/statuses/revoked", schemaPath: "#/properties/constraints/properties/statuses/properties/revoked/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.properties.revoked.type, parentSchema: schema15.properties.constraints.properties.statuses.properties.revoked, data: data15 };
                            if (vErrors === null) {
                                vErrors = [err19];
                            }
                            else {
                                vErrors.push(err19);
                            }
                            errors++;
                        }
                    }
                }
                else {
                    const err20 = { instancePath: instancePath + "/constraints/statuses", schemaPath: "#/properties/constraints/properties/statuses/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.statuses.type, parentSchema: schema15.properties.constraints.properties.statuses, data: data10 };
                    if (vErrors === null) {
                        vErrors = [err20];
                    }
                    else {
                        vErrors.push(err20);
                    }
                    errors++;
                }
            }
            if (data8.fields !== undefined) {
                let data17 = data8.fields;
                if (Array.isArray(data17)) {
                    const len2 = data17.length;
                    for (let i2 = 0; i2 < len2; i2++) {
                        if (!(validate51(data17[i2], { instancePath: instancePath + "/constraints/fields/" + i2, parentData: data17, parentDataProperty: i2, rootData }))) {
                            vErrors = vErrors === null ? validate51.errors : vErrors.concat(validate51.errors);
                            errors = vErrors.length;
                        }
                    }
                }
                else {
                    const err21 = { instancePath: instancePath + "/constraints/fields", schemaPath: "#/properties/constraints/properties/fields/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.fields.type, parentSchema: schema15.properties.constraints.properties.fields, data: data17 };
                    if (vErrors === null) {
                        vErrors = [err21];
                    }
                    else {
                        vErrors.push(err21);
                    }
                    errors++;
                }
            }
            if (data8.subject_is_issuer !== undefined) {
                let data19 = data8.subject_is_issuer;
                if (typeof data19 !== "string") {
                    const err22 = { instancePath: instancePath + "/constraints/subject_is_issuer", schemaPath: "#/properties/constraints/properties/subject_is_issuer/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.subject_is_issuer.type, parentSchema: schema15.properties.constraints.properties.subject_is_issuer, data: data19 };
                    if (vErrors === null) {
                        vErrors = [err22];
                    }
                    else {
                        vErrors.push(err22);
                    }
                    errors++;
                }
                if (!((data19 === "required") || (data19 === "preferred"))) {
                    const err23 = { instancePath: instancePath + "/constraints/subject_is_issuer", schemaPath: "#/properties/constraints/properties/subject_is_issuer/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.subject_is_issuer.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.subject_is_issuer.enum, parentSchema: schema15.properties.constraints.properties.subject_is_issuer, data: data19 };
                    if (vErrors === null) {
                        vErrors = [err23];
                    }
                    else {
                        vErrors.push(err23);
                    }
                    errors++;
                }
            }
            if (data8.is_holder !== undefined) {
                let data20 = data8.is_holder;
                if (Array.isArray(data20)) {
                    const len3 = data20.length;
                    for (let i3 = 0; i3 < len3; i3++) {
                        let data21 = data20[i3];
                        if (data21 && typeof data21 == "object" && !Array.isArray(data21)) {
                            if (data21.field_id === undefined) {
                                const err24 = { instancePath: instancePath + "/constraints/is_holder/" + i3, schemaPath: "#/properties/constraints/properties/is_holder/items/required", keyword: "required", params: { missingProperty: "field_id" }, message: "must have required property '" + "field_id" + "'", schema: schema15.properties.constraints.properties.is_holder.items.required, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data21 };
                                if (vErrors === null) {
                                    vErrors = [err24];
                                }
                                else {
                                    vErrors.push(err24);
                                }
                                errors++;
                            }
                            if (data21.directive === undefined) {
                                const err25 = { instancePath: instancePath + "/constraints/is_holder/" + i3, schemaPath: "#/properties/constraints/properties/is_holder/items/required", keyword: "required", params: { missingProperty: "directive" }, message: "must have required property '" + "directive" + "'", schema: schema15.properties.constraints.properties.is_holder.items.required, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data21 };
                                if (vErrors === null) {
                                    vErrors = [err25];
                                }
                                else {
                                    vErrors.push(err25);
                                }
                                errors++;
                            }
                            for (const key2 in data21) {
                                if (!((key2 === "field_id") || (key2 === "directive"))) {
                                    const err26 = { instancePath: instancePath + "/constraints/is_holder/" + i3, schemaPath: "#/properties/constraints/properties/is_holder/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data21 };
                                    if (vErrors === null) {
                                        vErrors = [err26];
                                    }
                                    else {
                                        vErrors.push(err26);
                                    }
                                    errors++;
                                }
                            }
                            if (data21.field_id !== undefined) {
                                let data22 = data21.field_id;
                                if (Array.isArray(data22)) {
                                    const len4 = data22.length;
                                    for (let i4 = 0; i4 < len4; i4++) {
                                        let data23 = data22[i4];
                                        if (typeof data23 !== "string") {
                                            const err27 = { instancePath: instancePath + "/constraints/is_holder/" + i3 + "/field_id/" + i4, schemaPath: "#/properties/constraints/properties/is_holder/items/properties/field_id/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.is_holder.items.properties.field_id.items.type, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.field_id.items, data: data23 };
                                            if (vErrors === null) {
                                                vErrors = [err27];
                                            }
                                            else {
                                                vErrors.push(err27);
                                            }
                                            errors++;
                                        }
                                    }
                                }
                                else {
                                    const err28 = { instancePath: instancePath + "/constraints/is_holder/" + i3 + "/field_id", schemaPath: "#/properties/constraints/properties/is_holder/items/properties/field_id/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.is_holder.items.properties.field_id.type, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.field_id, data: data22 };
                                    if (vErrors === null) {
                                        vErrors = [err28];
                                    }
                                    else {
                                        vErrors.push(err28);
                                    }
                                    errors++;
                                }
                            }
                            if (data21.directive !== undefined) {
                                let data24 = data21.directive;
                                if (typeof data24 !== "string") {
                                    const err29 = { instancePath: instancePath + "/constraints/is_holder/" + i3 + "/directive", schemaPath: "#/properties/constraints/properties/is_holder/items/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.is_holder.items.properties.directive.type, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.directive, data: data24 };
                                    if (vErrors === null) {
                                        vErrors = [err29];
                                    }
                                    else {
                                        vErrors.push(err29);
                                    }
                                    errors++;
                                }
                                if (!((data24 === "required") || (data24 === "preferred"))) {
                                    const err30 = { instancePath: instancePath + "/constraints/is_holder/" + i3 + "/directive", schemaPath: "#/properties/constraints/properties/is_holder/items/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.is_holder.items.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.is_holder.items.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.is_holder.items.properties.directive, data: data24 };
                                    if (vErrors === null) {
                                        vErrors = [err30];
                                    }
                                    else {
                                        vErrors.push(err30);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err31 = { instancePath: instancePath + "/constraints/is_holder/" + i3, schemaPath: "#/properties/constraints/properties/is_holder/items/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.is_holder.items.type, parentSchema: schema15.properties.constraints.properties.is_holder.items, data: data21 };
                            if (vErrors === null) {
                                vErrors = [err31];
                            }
                            else {
                                vErrors.push(err31);
                            }
                            errors++;
                        }
                    }
                }
                else {
                    const err32 = { instancePath: instancePath + "/constraints/is_holder", schemaPath: "#/properties/constraints/properties/is_holder/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.is_holder.type, parentSchema: schema15.properties.constraints.properties.is_holder, data: data20 };
                    if (vErrors === null) {
                        vErrors = [err32];
                    }
                    else {
                        vErrors.push(err32);
                    }
                    errors++;
                }
            }
            if (data8.same_subject !== undefined) {
                let data25 = data8.same_subject;
                if (Array.isArray(data25)) {
                    const len5 = data25.length;
                    for (let i5 = 0; i5 < len5; i5++) {
                        let data26 = data25[i5];
                        if (data26 && typeof data26 == "object" && !Array.isArray(data26)) {
                            if (data26.field_id === undefined) {
                                const err33 = { instancePath: instancePath + "/constraints/same_subject/" + i5, schemaPath: "#/properties/constraints/properties/same_subject/items/required", keyword: "required", params: { missingProperty: "field_id" }, message: "must have required property '" + "field_id" + "'", schema: schema15.properties.constraints.properties.same_subject.items.required, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data26 };
                                if (vErrors === null) {
                                    vErrors = [err33];
                                }
                                else {
                                    vErrors.push(err33);
                                }
                                errors++;
                            }
                            if (data26.directive === undefined) {
                                const err34 = { instancePath: instancePath + "/constraints/same_subject/" + i5, schemaPath: "#/properties/constraints/properties/same_subject/items/required", keyword: "required", params: { missingProperty: "directive" }, message: "must have required property '" + "directive" + "'", schema: schema15.properties.constraints.properties.same_subject.items.required, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data26 };
                                if (vErrors === null) {
                                    vErrors = [err34];
                                }
                                else {
                                    vErrors.push(err34);
                                }
                                errors++;
                            }
                            for (const key3 in data26) {
                                if (!((key3 === "field_id") || (key3 === "directive"))) {
                                    const err35 = { instancePath: instancePath + "/constraints/same_subject/" + i5, schemaPath: "#/properties/constraints/properties/same_subject/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties", schema: false, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data26 };
                                    if (vErrors === null) {
                                        vErrors = [err35];
                                    }
                                    else {
                                        vErrors.push(err35);
                                    }
                                    errors++;
                                }
                            }
                            if (data26.field_id !== undefined) {
                                let data27 = data26.field_id;
                                if (Array.isArray(data27)) {
                                    const len6 = data27.length;
                                    for (let i6 = 0; i6 < len6; i6++) {
                                        let data28 = data27[i6];
                                        if (typeof data28 !== "string") {
                                            const err36 = { instancePath: instancePath + "/constraints/same_subject/" + i5 + "/field_id/" + i6, schemaPath: "#/properties/constraints/properties/same_subject/items/properties/field_id/items/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.same_subject.items.properties.field_id.items.type, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.field_id.items, data: data28 };
                                            if (vErrors === null) {
                                                vErrors = [err36];
                                            }
                                            else {
                                                vErrors.push(err36);
                                            }
                                            errors++;
                                        }
                                    }
                                }
                                else {
                                    const err37 = { instancePath: instancePath + "/constraints/same_subject/" + i5 + "/field_id", schemaPath: "#/properties/constraints/properties/same_subject/items/properties/field_id/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.same_subject.items.properties.field_id.type, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.field_id, data: data27 };
                                    if (vErrors === null) {
                                        vErrors = [err37];
                                    }
                                    else {
                                        vErrors.push(err37);
                                    }
                                    errors++;
                                }
                            }
                            if (data26.directive !== undefined) {
                                let data29 = data26.directive;
                                if (typeof data29 !== "string") {
                                    const err38 = { instancePath: instancePath + "/constraints/same_subject/" + i5 + "/directive", schemaPath: "#/properties/constraints/properties/same_subject/items/properties/directive/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema15.properties.constraints.properties.same_subject.items.properties.directive.type, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.directive, data: data29 };
                                    if (vErrors === null) {
                                        vErrors = [err38];
                                    }
                                    else {
                                        vErrors.push(err38);
                                    }
                                    errors++;
                                }
                                if (!((data29 === "required") || (data29 === "preferred"))) {
                                    const err39 = { instancePath: instancePath + "/constraints/same_subject/" + i5 + "/directive", schemaPath: "#/properties/constraints/properties/same_subject/items/properties/directive/enum", keyword: "enum", params: { allowedValues: schema15.properties.constraints.properties.same_subject.items.properties.directive.enum }, message: "must be equal to one of the allowed values", schema: schema15.properties.constraints.properties.same_subject.items.properties.directive.enum, parentSchema: schema15.properties.constraints.properties.same_subject.items.properties.directive, data: data29 };
                                    if (vErrors === null) {
                                        vErrors = [err39];
                                    }
                                    else {
                                        vErrors.push(err39);
                                    }
                                    errors++;
                                }
                            }
                        }
                        else {
                            const err40 = { instancePath: instancePath + "/constraints/same_subject/" + i5, schemaPath: "#/properties/constraints/properties/same_subject/items/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.properties.same_subject.items.type, parentSchema: schema15.properties.constraints.properties.same_subject.items, data: data26 };
                            if (vErrors === null) {
                                vErrors = [err40];
                            }
                            else {
                                vErrors.push(err40);
                            }
                            errors++;
                        }
                    }
                }
                else {
                    const err41 = { instancePath: instancePath + "/constraints/same_subject", schemaPath: "#/properties/constraints/properties/same_subject/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema15.properties.constraints.properties.same_subject.type, parentSchema: schema15.properties.constraints.properties.same_subject, data: data25 };
                    if (vErrors === null) {
                        vErrors = [err41];
                    }
                    else {
                        vErrors.push(err41);
                    }
                    errors++;
                }
            }
        }
        else {
            const err42 = { instancePath: instancePath + "/constraints", schemaPath: "#/properties/constraints/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.properties.constraints.type, parentSchema: schema15.properties.constraints, data: data8 };
            if (vErrors === null) {
                vErrors = [err42];
            }
            else {
                vErrors.push(err42);
            }
            errors++;
        }
    }
}
else {
    const err43 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema15.type, parentSchema: schema15, data };
    if (vErrors === null) {
        vErrors = [err43];
    }
    else {
        vErrors.push(err43);
    }
    errors++;
} validate47.errors = vErrors; return errors === 0; }
function validate42(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (data && typeof data == "object" && !Array.isArray(data)) {
    if (data.presentation_definition !== undefined) {
        let data0 = data.presentation_definition;
        if (data0 && typeof data0 == "object" && !Array.isArray(data0)) {
            if (data0.id === undefined) {
                const err0 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/required", keyword: "required", params: { missingProperty: "id" }, message: "must have required property '" + "id" + "'", schema: schema12.properties.presentation_definition.required, parentSchema: schema12.properties.presentation_definition, data: data0 };
                if (vErrors === null) {
                    vErrors = [err0];
                }
                else {
                    vErrors.push(err0);
                }
                errors++;
            }
            if (data0.input_descriptors === undefined) {
                const err1 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/required", keyword: "required", params: { missingProperty: "input_descriptors" }, message: "must have required property '" + "input_descriptors" + "'", schema: schema12.properties.presentation_definition.required, parentSchema: schema12.properties.presentation_definition, data: data0 };
                if (vErrors === null) {
                    vErrors = [err1];
                }
                else {
                    vErrors.push(err1);
                }
                errors++;
            }
            for (const key0 in data0) {
                if (!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "frame")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors"))) {
                    const err2 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties", schema: false, parentSchema: schema12.properties.presentation_definition, data: data0 };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
            }
            if (data0.id !== undefined) {
                let data1 = data0.id;
                if (typeof data1 !== "string") {
                    const err3 = { instancePath: instancePath + "/presentation_definition/id", schemaPath: "#/properties/presentation_definition/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema12.properties.presentation_definition.properties.id.type, parentSchema: schema12.properties.presentation_definition.properties.id, data: data1 };
                    if (vErrors === null) {
                        vErrors = [err3];
                    }
                    else {
                        vErrors.push(err3);
                    }
                    errors++;
                }
            }
            if (data0.name !== undefined) {
                let data2 = data0.name;
                if (typeof data2 !== "string") {
                    const err4 = { instancePath: instancePath + "/presentation_definition/name", schemaPath: "#/properties/presentation_definition/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema12.properties.presentation_definition.properties.name.type, parentSchema: schema12.properties.presentation_definition.properties.name, data: data2 };
                    if (vErrors === null) {
                        vErrors = [err4];
                    }
                    else {
                        vErrors.push(err4);
                    }
                    errors++;
                }
            }
            if (data0.purpose !== undefined) {
                let data3 = data0.purpose;
                if (typeof data3 !== "string") {
                    const err5 = { instancePath: instancePath + "/presentation_definition/purpose", schemaPath: "#/properties/presentation_definition/properties/purpose/type", keyword: "type", params: { type: "string" }, message: "must be string", schema: schema12.properties.presentation_definition.properties.purpose.type, parentSchema: schema12.properties.presentation_definition.properties.purpose, data: data3 };
                    if (vErrors === null) {
                        vErrors = [err5];
                    }
                    else {
                        vErrors.push(err5);
                    }
                    errors++;
                }
            }
            if (data0.format !== undefined) {
                if (!(validate43(data0.format, { instancePath: instancePath + "/presentation_definition/format", parentData: data0, parentDataProperty: "format", rootData }))) {
                    vErrors = vErrors === null ? validate43.errors : vErrors.concat(validate43.errors);
                    errors = vErrors.length;
                }
            }
            if (data0.frame !== undefined) {
                let data5 = data0.frame;
                if (data5 && typeof data5 == "object" && !Array.isArray(data5)) { }
                else {
                    const err6 = { instancePath: instancePath + "/presentation_definition/frame", schemaPath: "#/properties/presentation_definition/properties/frame/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema12.properties.presentation_definition.properties.frame.type, parentSchema: schema12.properties.presentation_definition.properties.frame, data: data5 };
                    if (vErrors === null) {
                        vErrors = [err6];
                    }
                    else {
                        vErrors.push(err6);
                    }
                    errors++;
                }
            }
            if (data0.submission_requirements !== undefined) {
                let data6 = data0.submission_requirements;
                if (Array.isArray(data6)) {
                    const len0 = data6.length;
                    for (let i0 = 0; i0 < len0; i0++) {
                        if (!(validate45(data6[i0], { instancePath: instancePath + "/presentation_definition/submission_requirements/" + i0, parentData: data6, parentDataProperty: i0, rootData }))) {
                            vErrors = vErrors === null ? validate45.errors : vErrors.concat(validate45.errors);
                            errors = vErrors.length;
                        }
                    }
                }
                else {
                    const err7 = { instancePath: instancePath + "/presentation_definition/submission_requirements", schemaPath: "#/properties/presentation_definition/properties/submission_requirements/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema12.properties.presentation_definition.properties.submission_requirements.type, parentSchema: schema12.properties.presentation_definition.properties.submission_requirements, data: data6 };
                    if (vErrors === null) {
                        vErrors = [err7];
                    }
                    else {
                        vErrors.push(err7);
                    }
                    errors++;
                }
            }
            if (data0.input_descriptors !== undefined) {
                let data8 = data0.input_descriptors;
                if (Array.isArray(data8)) {
                    const len1 = data8.length;
                    for (let i1 = 0; i1 < len1; i1++) {
                        if (!(validate47(data8[i1], { instancePath: instancePath + "/presentation_definition/input_descriptors/" + i1, parentData: data8, parentDataProperty: i1, rootData }))) {
                            vErrors = vErrors === null ? validate47.errors : vErrors.concat(validate47.errors);
                            errors = vErrors.length;
                        }
                    }
                }
                else {
                    const err8 = { instancePath: instancePath + "/presentation_definition/input_descriptors", schemaPath: "#/properties/presentation_definition/properties/input_descriptors/type", keyword: "type", params: { type: "array" }, message: "must be array", schema: schema12.properties.presentation_definition.properties.input_descriptors.type, parentSchema: schema12.properties.presentation_definition.properties.input_descriptors, data: data8 };
                    if (vErrors === null) {
                        vErrors = [err8];
                    }
                    else {
                        vErrors.push(err8);
                    }
                    errors++;
                }
            }
        }
        else {
            const err9 = { instancePath: instancePath + "/presentation_definition", schemaPath: "#/properties/presentation_definition/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema12.properties.presentation_definition.type, parentSchema: schema12.properties.presentation_definition, data: data0 };
            if (vErrors === null) {
                vErrors = [err9];
            }
            else {
                vErrors.push(err9);
            }
            errors++;
        }
    }
}
else {
    const err10 = { instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object", schema: schema12.type, parentSchema: schema12, data };
    if (vErrors === null) {
        vErrors = [err10];
    }
    else {
        vErrors.push(err10);
    }
    errors++;
} validate42.errors = vErrors; return errors === 0; }
//# sourceMappingURL=data:application/json;base64,