"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PEX = void 0;
const ssi_types_1 = require("@sphereon/ssi-types");
const ConstraintUtils_1 = require("./ConstraintUtils");
const evaluation_1 = require("./evaluation");
const signing_1 = require("./signing");
const types_1 = require("./types");
const utils_1 = require("./utils");
const validation_1 = require("./validation");
/**
 * This is the main interfacing class to be used by developers using the PEX library.
 */
class PEX {
    constructor() {
        // TODO:  So we have state in the form of this property which is set in the constructor, but we are overwriting it elsewhere. We need to retrhink how to instantiate PEX
        this._evaluationClientWrapper = new evaluation_1.EvaluationClientWrapper();
    }
    /***
     * The evaluatePresentation compares what is expected from a presentation with a presentationDefinition.
     * presentationDefinition: It can be either v1 or v2 of presentationDefinition
     *
     * @param presentationDefinition the definition of what is expected in the presentation.
     * @param presentation the presentation which has to be evaluated in comparison of the definition.
     * @param opts - limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the evaluation results specify what was expected and was fulfilled and also specifies which requirements described in the input descriptors
     * were not fulfilled by the presentation.
     */
    evaluatePresentation(presentationDefinition, presentation, opts) {
        var _a, _b;
        const generatePresentationSubmission = (opts === null || opts === void 0 ? void 0 : opts.generatePresentationSubmission) !== undefined ? opts.generatePresentationSubmission : (opts === null || opts === void 0 ? void 0 : opts.presentationSubmission) === undefined;
        const pd = types_1.SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        const presentationCopy = JSON.parse(JSON.stringify(presentation));
        const wrappedPresentation = types_1.SSITypesBuilder.mapExternalVerifiablePresentationToWrappedVP(presentationCopy);
        const presentationSubmission = (_a = opts === null || opts === void 0 ? void 0 : opts.presentationSubmission) !== null && _a !== void 0 ? _a : wrappedPresentation.decoded.presentation_submission;
        if (!presentationSubmission && !generatePresentationSubmission) {
            throw Error(`Either a presentation submission as part of the VP or provided separately was expected`);
        }
        const holderDIDs = wrappedPresentation.presentation.holder ? [wrappedPresentation.presentation.holder] : [];
        const updatedOpts = Object.assign(Object.assign({}, opts), { holderDIDs,
            presentationSubmission,
            generatePresentationSubmission });
        const result = this._evaluationClientWrapper.evaluate(pd, wrappedPresentation.vcs, updatedOpts);
        if ((_b = result.value) === null || _b === void 0 ? void 0 : _b.descriptor_map.length) {
            const selectFromClientWrapper = new evaluation_1.EvaluationClientWrapper();
            const selectResults = selectFromClientWrapper.selectFrom(pd, wrappedPresentation.vcs, updatedOpts);
            if (selectResults.areRequiredCredentialsPresent !== ConstraintUtils_1.Status.ERROR) {
                result.errors = [];
            }
        }
        return result;
    }
    /***
     * The evaluate compares what is expected from a verifiableCredentials with the presentationDefinition.
     *
     * @param presentationDefinition the v1 or v2 definition of what is expected in the presentation.
     * @param verifiableCredentials the verifiable credentials which are candidates to fulfill requirements defined in the presentationDefinition param.
     * @param opts - holderDIDs the list of the DIDs that the wallet holders controls. Optional, but needed by some input requirements that do a holderDID check.
     * @           - limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the evaluation results specify what was expected and was fulfilled and also specifies which requirements described in the input descriptors
     * were not fulfilled by the verifiable credentials.
     */
    evaluateCredentials(presentationDefinition, verifiableCredentials, opts) {
        const wrappedVerifiableCredentials = types_1.SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(verifiableCredentials);
        // TODO:  So we have state in the form of this property which is set in the constructor, but we are overwriting it here. We need to retrhink how to instantiate PEX
        this._evaluationClientWrapper = new evaluation_1.EvaluationClientWrapper();
        const pd = types_1.SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        const result = this._evaluationClientWrapper.evaluate(pd, wrappedVerifiableCredentials, opts);
        if (result.value && result.value.descriptor_map.length) {
            const selectFromClientWrapper = new evaluation_1.EvaluationClientWrapper();
            const selectResults = selectFromClientWrapper.selectFrom(pd, wrappedVerifiableCredentials, opts);
            result.areRequiredCredentialsPresent = selectResults.areRequiredCredentialsPresent;
            result.errors = selectResults.errors;
        }
        else {
            result.areRequiredCredentialsPresent = ConstraintUtils_1.Status.ERROR;
        }
        return result;
    }
    /**
     * The selectFrom method is a helper function that helps filter out the verifiable credentials which can not be selected and returns
     * the selectable credentials.
     *
     * @param presentationDefinition the v1 or v2 definition of what is expected in the presentation.
     * @param verifiableCredentials verifiable credentials are the credentials from wallet provided to the library to find selectable credentials.
     * @param opts - holderDIDs the decentralized identifier(s) of the wallet holderDID. This is used to identify the credentials issued to the holderDID of wallet in certain scenario's.
     *             - limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the selectable credentials.
     */
    selectFrom(presentationDefinition, verifiableCredentials, opts) {
        const verifiableCredentialCopy = JSON.parse(JSON.stringify(verifiableCredentials));
        const pd = types_1.SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        // TODO:  So we have state in the form of this property which is set in the constructor, but we are overwriting it here. We need to retrhink how to instantiate PEX
        this._evaluationClientWrapper = new evaluation_1.EvaluationClientWrapper();
        return this._evaluationClientWrapper.selectFrom(pd, types_1.SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(verifiableCredentialCopy), opts);
    }
    presentationSubmissionFrom(presentationDefinition, selectedCredentials, opts) {
        const pd = types_1.SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        return this._evaluationClientWrapper.submissionFrom(pd, types_1.SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(selectedCredentials), opts);
    }
    /**
     * This method helps create an Unsigned Presentation. An Unsigned Presentation after signing becomes a Presentation. And can be sent to
     * the verifier after signing it.
     *
     * @param presentationDefinition the v1 or v2 definition of what is expected in the presentation.
     * @param selectedCredentials the credentials which were declared selectable by getSelectableCredentials and then chosen by the intelligent-user
     * (e.g. human).
     * @param opts - holderDID optional; the decentralized identity of the wallet holderDID. This is used to identify the holderDID of the presentation.
     *
     * @return the presentation.
     */
    presentationFrom(presentationDefinition, selectedCredentials, opts) {
        var _a;
        const presentationSubmissionLocation = (_a = opts === null || opts === void 0 ? void 0 : opts.presentationSubmissionLocation) !== null && _a !== void 0 ? _a : signing_1.PresentationSubmissionLocation.PRESENTATION;
        const presentationSubmission = this.presentationSubmissionFrom(presentationDefinition, selectedCredentials, opts);
        const presentation = PEX.constructPresentation(selectedCredentials, Object.assign(Object.assign({}, opts), { 
            // We only pass in the submission in case it needs to be included in the presentation
            presentationSubmission: presentationSubmissionLocation === signing_1.PresentationSubmissionLocation.PRESENTATION ? presentationSubmission : undefined }));
        return {
            presentation,
            presentationSubmissionLocation,
            presentationSubmission,
        };
    }
    static constructPresentation(selectedCredentials, opts) {
        var _a, _b, _c;
        if (!selectedCredentials) {
            throw Error(`At least a verifiable credential needs to be passed in to create a presentation`);
        }
        const verifiableCredential = (Array.isArray(selectedCredentials) ? selectedCredentials : [selectedCredentials]);
        const wVCs = verifiableCredential.map((vc) => ssi_types_1.CredentialMapper.toWrappedVerifiableCredential(vc));
        const holders = Array.from(new Set(wVCs.flatMap((wvc) => (0, utils_1.getSubjectIdsAsString)(wvc.credential))));
        if (holders.length !== 1 && !(opts === null || opts === void 0 ? void 0 : opts.holderDID)) {
            console.log(`We deduced ${holders.length} subject from ${wVCs.length} Verifiable Credentials, and no holder property was given. This might lead to undesired results`);
        }
        const holder = (_a = opts === null || opts === void 0 ? void 0 : opts.holderDID) !== null && _a !== void 0 ? _a : (holders.length === 1 ? holders[0] : undefined);
        const type = ((_b = opts === null || opts === void 0 ? void 0 : opts.basePresentationPayload) === null || _b === void 0 ? void 0 : _b.type)
            ? Array.isArray(opts.basePresentationPayload.type)
                ? opts.basePresentationPayload.type
                : [opts.basePresentationPayload.type]
            : [];
        if (!type.includes('VerifiablePresentation')) {
            type.push('VerifiablePresentation');
        }
        const context = ((_c = opts === null || opts === void 0 ? void 0 : opts.basePresentationPayload) === null || _c === void 0 ? void 0 : _c['@context'])
            ? Array.isArray(opts.basePresentationPayload['@context'])
                ? opts.basePresentationPayload['@context']
                : [opts.basePresentationPayload['@context']]
            : [];
        if (!context.includes('https://www.w3.org/2018/credentials/v1')) {
            context.push('https://www.w3.org/2018/credentials/v1');
        }
        if (opts === null || opts === void 0 ? void 0 : opts.presentationSubmission) {
            if (!type.includes('PresentationSubmission')) {
                type.push('PresentationSubmission');
            }
            if (!context.includes('https://identity.foundation/presentation-exchange/submission/v1')) {
                context.push('https://identity.foundation/presentation-exchange/submission/v1');
            }
        }
        return Object.assign(Object.assign(Object.assign(Object.assign({}, opts === null || opts === void 0 ? void 0 : opts.basePresentationPayload), { '@context': context, type,
            holder }), ((opts === null || opts === void 0 ? void 0 : opts.presentationSubmission) && { presentation_submission: opts.presentationSubmission })), { verifiableCredential });
    }
    /**
     * This method validates whether an object is usable as a presentation definition or not.
     *
     * @param presentationDefinition presentationDefinition of V1 or v2 to be validated.
     *
     * @return the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation definition
     */
    static validateDefinition(presentationDefinition) {
        const result = (0, utils_1.definitionVersionDiscovery)(presentationDefinition);
        if (result.error) {
            throw new Error(result.error);
        }
        const validators = [];
        result.version === types_1.PEVersion.v1
            ? validators.push({
                bundler: new validation_1.PresentationDefinitionV1VB('root'),
                target: types_1.SSITypesBuilder.modelEntityToInternalPresentationDefinitionV1(presentationDefinition),
            })
            : validators.push({
                bundler: new validation_1.PresentationDefinitionV2VB('root'),
                target: types_1.SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinition),
            });
        return new validation_1.ValidationEngine().validate(validators);
    }
    /**
     * This method validates whether an object is usable as a presentation submission or not.
     *
     * @param presentationSubmission the object to be validated.
     *
     * @return the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation submission
     */
    static validateSubmission(presentationSubmission) {
        return new validation_1.ValidationEngine().validate([
            {
                bundler: new validation_1.PresentationSubmissionVB('root'),
                target: presentationSubmission,
            },
        ]);
    }
    /**
     * This method can be used to combine a definition, selected Verifiable Credentials, together with
     * signing opts and a callback to sign a presentation, making it a Verifiable Presentation before sending.
     *
     * Please note that PEX has no signature support on purpose. We didn't want this library to depend on all kinds of signature suites.
     * The callback function next to the Signing Params also gets a Presentation which is evaluated against the definition.
     * It is up to you to decide whether you simply update the supplied partial proof and add it to the presentation in the callback,
     * or whether you will use the selected Credentials, Presentation definition, evaluation results and/or presentation submission together with the signature opts
     *
     * @param presentationDefinition the Presentation Definition V1 or V2
     * @param selectedCredentials the PEX and/or User selected/filtered credentials that will become part of the Verifiable Presentation
     * @param signingCallBack the function which will be provided as a parameter. And this will be the method that will be able to perform actual
     *        signing. One example of signing is available in the project named. pe-selective-disclosure.
     * @param opts Signing Params these are the signing params required to sign.
     *
     * @return the signed and thus Verifiable Presentation.
     */
    verifiablePresentationFrom(presentationDefinition, selectedCredentials, signingCallBack, opts) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { holderDID, signatureOptions, proofOptions } = opts;
            const presentationSubmissionLocation = (_a = opts.presentationSubmissionLocation) !== null && _a !== void 0 ? _a : signing_1.PresentationSubmissionLocation.PRESENTATION;
            const updatedOpts = Object.assign(Object.assign({}, opts), { presentationSubmissionLocation });
            function limitedDisclosureSuites() {
                let limitDisclosureSignatureSuites = [];
                if (proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.typeSupportsSelectiveDisclosure) {
                    if (!(proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.type)) {
                        throw Error('Please provide a proof type if you enable selective disclosure');
                    }
                    limitDisclosureSignatureSuites = [proofOptions.type];
                }
                return limitDisclosureSignatureSuites;
            }
            const holderDIDs = holderDID ? [holderDID] : [];
            const limitDisclosureSignatureSuites = limitedDisclosureSuites();
            const evaluationResult = this.evaluateCredentials(presentationDefinition, selectedCredentials, {
                holderDIDs,
                limitDisclosureSignatureSuites,
            });
            const presentationResult = this.presentationFrom(presentationDefinition, evaluationResult.verifiableCredential, updatedOpts);
            const evaluationResults = this.evaluatePresentation(presentationDefinition, presentationResult.presentation, Object.assign({ limitDisclosureSignatureSuites }, (presentationSubmissionLocation === signing_1.PresentationSubmissionLocation.EXTERNAL && {
                // The method will pickup submissions included in the Presentation anyway
                presentationSubmission: presentationResult.presentationSubmission,
            })));
            if (!evaluationResults.value) {
                throw new Error('Could not get evaluation results from presentationResult');
            }
            const proof = {
                type: proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.type,
                verificationMethod: signatureOptions === null || signatureOptions === void 0 ? void 0 : signatureOptions.verificationMethod,
                created: (proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.created) ? proofOptions.created : new Date().toISOString(),
                proofPurpose: proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.proofPurpose,
                proofValue: signatureOptions === null || signatureOptions === void 0 ? void 0 : signatureOptions.proofValue,
                jws: signatureOptions === null || signatureOptions === void 0 ? void 0 : signatureOptions.jws,
                challenge: proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.challenge,
                nonce: proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.nonce,
                domain: proofOptions === null || proofOptions === void 0 ? void 0 : proofOptions.domain,
            };
            const callBackParams = {
                options: updatedOpts,
                presentation: presentationResult.presentation,
                presentationDefinition,
                selectedCredentials,
                proof,
                presentationSubmission: evaluationResults.value,
                evaluationResults,
            };
            const verifiablePresentation = yield signingCallBack(callBackParams);
            return {
                verifiablePresentation,
                presentationSubmissionLocation,
                presentationSubmission: evaluationResults.value,
            };
        });
    }
    static definitionVersionDiscovery(presentationDefinition) {
        return (0, utils_1.definitionVersionDiscovery)(presentationDefinition);
    }
}
exports.PEX = PEX;
//# sourceMappingURL=data:application/json;base64,