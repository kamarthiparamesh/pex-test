import { JSONPath as jp } from '@astronautlabs/jsonpath';
import { nanoid } from 'nanoid';
import { Status } from '../../ConstraintUtils';
import { PEVersion } from '../../types';
import PexMessages from '../../types/Messages';
import { AbstractEvaluationHandler } from './abstractEvaluationHandler';
export class UriEvaluationHandler extends AbstractEvaluationHandler {
    static matchAll = require('string.prototype.matchall');
    constructor(client) {
        super(client);
    }
    getName() {
        return 'UriEvaluation';
    }
    static HASHLINK_URL_ENCODED_REGEX = /hl:[a-zA-Z0-9]+:[a-zA-Z0-9]+/g;
    static HASHLINK_QUERY_URL_REGEX = /https*?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)(hl=[a-zA-Z0-9]+)/g;
    handle(definition, wrappedVcs) {
        // This filter is removed in V2
        definition.input_descriptors.forEach((inDesc, descriptorIdx) => {
            const uris = definition.getVersion() !== PEVersion.v2 ? inDesc.schema.map((so) => so.uri) : [];
            wrappedVcs.forEach((wvc, wrappedVCIdx) => {
                const vcUris = UriEvaluationHandler.buildVcContextAndSchemaUris(wvc.credential, definition.getVersion());
                this.evaluateUris(wvc, vcUris, uris, descriptorIdx, wrappedVCIdx, definition.getVersion());
            });
        });
        const descriptorMap = this.getResults()
            .filter((result) => result.status === Status.INFO)
            .map((result) => {
            const inputDescriptor = jp.nodes(definition, result.input_descriptor_path)[0].value;
            return {
                id: inputDescriptor.id,
                format: result.payload?.format,
                path: result.verifiable_credential_path,
            };
        });
        // The presentation submission is being created in this handler, then updated in subsequent handler.
        // TODO: This approach needs to be refactored for a new Major version.
        // Also there is no apparent need for the indirection and state in this class.
        // Simply do the first loops and amend the presentation submission in every loop.
        if (this.client.generatePresentationSubmission && (!this.presentationSubmission || Object.keys(this.presentationSubmission).length === 0)) {
            this.presentationSubmission = {
                id: nanoid(),
                definition_id: definition.id,
                descriptor_map: descriptorMap,
            };
        }
    }
    evaluateUris(wvc, verifiableCredentialUris, inputDescriptorsUris, idIdx, vcIdx, pdVersion) {
        let hasAnyMatch = false;
        if (pdVersion === PEVersion.v1) {
            for (let i = 0; i < inputDescriptorsUris.length; i++) {
                if (UriEvaluationHandler.containsHashlink(inputDescriptorsUris[i])) {
                    this.getResults().push(this.createWarnResultObject(idIdx, vcIdx));
                }
            }
            for (let i = 0; i < verifiableCredentialUris.length; i++) {
                if (inputDescriptorsUris.find((el) => el === verifiableCredentialUris[i]) != undefined) {
                    hasAnyMatch = true;
                }
            }
        }
        else {
            hasAnyMatch = true;
        }
        if (hasAnyMatch) {
            this.getResults().push(this.createSuccessResultObject(wvc, inputDescriptorsUris, idIdx, vcIdx));
        }
        else {
            this.getResults().push(this.createErrorResultObject(wvc, inputDescriptorsUris, idIdx, vcIdx));
        }
    }
    static buildVcContextAndSchemaUris(credential, version) {
        const uris = [];
        if (Array.isArray(credential['@context'])) {
            credential['@context'].forEach((value) => uris.push(value));
        }
        else {
            uris.push(credential['@context']);
        }
        if (Array.isArray(credential.credentialSchema) && credential.credentialSchema.length > 0) {
            credential.credentialSchema.forEach((element) => uris.push(element.id));
        }
        else if (credential.credentialSchema) {
            uris.push(credential.credentialSchema.id);
        }
        if (version === PEVersion.v1) {
            // JWT VC Profile and MS Entry Verified ID do use the schema from V1 to match against types in the VC
            Array.isArray(credential.type) ? credential.type.forEach((type) => uris.push(type)) : credential.type ? uris.push(credential.type) : undefined;
        }
        return uris;
    }
    createSuccessResultObject(wvc, inputDescriptorsUris, idIdx, vcIdx) {
        const result = this.createResult(idIdx, vcIdx);
        result.status = Status.INFO;
        result.message = PexMessages.URI_EVALUATION_PASSED;
        result.payload = {
            format: wvc.format,
            vcContext: wvc.credential['@context'],
            vcCredentialSchema: wvc.credential.credentialSchema,
            inputDescriptorsUris,
        };
        return result;
    }
    createErrorResultObject(wvc, inputDescriptorsUris, idIdx, vcIdx) {
        const result = this.createResult(idIdx, vcIdx);
        result.status = Status.ERROR;
        result.message = PexMessages.URI_EVALUATION_DIDNT_PASS;
        result.payload = {
            format: wvc.format,
            vcContext: wvc.credential['@context'],
            vcCredentialSchema: wvc.credential.credentialSchema,
            inputDescriptorsUris,
        };
        return result;
    }
    createWarnResultObject(idIdx, vcIdx) {
        const result = this.createResult(idIdx, vcIdx);
        result.status = Status.WARN;
        result.message = PexMessages.URI_EVALUATION_DIDNT_PASS;
        result.payload = PexMessages.INPUT_DESCRIPTOR_CONTEXT_CONTAINS_HASHLINK_VERIFICATION_NOT_SUPPORTED;
        return result;
    }
    createResult(idIdx, vcIdx) {
        return {
            input_descriptor_path: `$.input_descriptors[${idIdx}]`,
            verifiable_credential_path: `$[${vcIdx}]`,
            evaluator: this.getName(),
            status: Status.INFO,
            message: undefined,
        };
    }
    static containsHashlink(url) {
        return !(this.matchAll(url, UriEvaluationHandler.HASHLINK_QUERY_URL_REGEX).next().done &&
            this.matchAll(url, UriEvaluationHandler.HASHLINK_URL_ENCODED_REGEX).next().done);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpRXZhbHVhdGlvbkhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvZXZhbHVhdGlvbi9oYW5kbGVycy91cmlFdmFsdWF0aW9uSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxJQUFJLEVBQUUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBR3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFaEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQy9DLE9BQU8sRUFBcUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNHLE9BQU8sV0FBVyxNQUFNLHNCQUFzQixDQUFDO0FBSS9DLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXhFLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSx5QkFBeUI7SUFDakUsTUFBTSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUV2RCxZQUFZLE1BQXdCO1FBQ2xDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxNQUFNLENBQUMsMEJBQTBCLEdBQUcsK0JBQStCLENBQUM7SUFDcEUsTUFBTSxDQUFDLHdCQUF3QixHQUNyQyx1SEFBdUgsQ0FBQztJQUVuSCxNQUFNLENBQUMsVUFBMkMsRUFBRSxVQUF5QztRQUNsRywrQkFBK0I7UUFDSSxVQUFXLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBeUIsRUFBRSxhQUFxQixFQUFFLEVBQUU7WUFDNUgsTUFBTSxJQUFJLEdBQWEsVUFBVSxDQUFDLFVBQVUsRUFBRSxLQUFLLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FB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