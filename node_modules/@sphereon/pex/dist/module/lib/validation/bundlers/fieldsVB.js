import { JSONPath as jp } from '@astronautlabs/jsonpath';
import { Optionality } from '@sphereon/pex-models';
import validateFilterv1 from '../validateFilterv1.js';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import validateFilterv2 from '../validateFilterv2.js';
import { ValidationBundler } from './validationBundler';
export class FieldsVB extends ValidationBundler {
    mustHaveValidJsonPathsMsg = 'field object "path" property must contain array of valid json paths';
    pathObjMustHaveValidJsonPathMsg = 'field object "path" property must contain valid json paths.';
    filterMustBeValidJsonSchemaMsg = 'field object "filter" property must be valid json schema';
    filterIsMustInPresenceOfPredicateMsg = 'field object must have a "filter" property if "predicate" is present';
    filterIsNotValidJsonSchemaDescriptorMsg = 'could not parse "filter" object as a valid json schema descriptor.';
    purposeShouldBeANonEmptyStringMsg = 'purpose should be a non empty string';
    shouldBeKnownOptionMsg = 'Unknown predicate property';
    constructor(parentTag) {
        super(parentTag, 'fields');
    }
    getValidations(fields) {
        let validations = [];
        if (fields) {
            for (let srInd = 0; srInd < fields.length; srInd++) {
                validations = [...validations, ...this.getValidationsFor(fields[srInd], srInd)];
            }
        }
        return validations;
    }
    getValidationsFor(field, indx) {
        return [
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: this.mustHaveValidJsonPaths(),
                message: this.mustHaveValidJsonPathsMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: this.filterMustBeValidJsonSchema(),
                message: this.filterMustBeValidJsonSchemaMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: this.filterIsMustInPresenceOfPredicate(),
                message: this.filterIsMustInPresenceOfPredicateMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: (field) => FieldsVB.optionalNonEmptyString(field?.purpose),
                message: this.purposeShouldBeANonEmptyStringMsg,
            },
            {
                tag: this.getMyTag(indx),
                target: field,
                predicate: (field) => FieldsVB.shouldBeKnownOption(field?.predicate),
                message: this.shouldBeKnownOptionMsg,
            },
        ];
    }
    getMyTag(srInd) {
        // TODO extract to make it generic
        return this.parentTag + '.' + this.myTag + '[' + srInd + ']';
    }
    mustHaveValidJsonPaths() {
        return (fieldObj) => fieldObj.path != null && fieldObj.path.length > 0 && this._validateJsonPaths(fieldObj.path);
    }
    _validateJsonPaths(jsonPath) {
        const invalidPaths = [];
        jsonPath.forEach((path) => {
            try {
                jp.parse(path);
            }
            catch (err) {
                invalidPaths.push(path);
            }
        });
        if (invalidPaths.length > 0) {
            throw this.toChecked(this.pathObjMustHaveValidJsonPathMsg + ' Got: ' + JSON.stringify(invalidPaths));
        }
        return true;
    }
    filterMustBeValidJsonSchema() {
        return (fieldObj) => this._validateFilter(fieldObj.filter);
    }
    _validateFilter(filter) {
        if (filter == null) {
            return true;
        }
        let valid = false;
        try {
            valid = validateFilterv2(filter);
            if (!valid) {
                valid = validateFilterv1(filter);
            }
        }
        catch (err) {
            throw this.toChecked(this.filterIsNotValidJsonSchemaDescriptorMsg + ' Got ' + JSON.stringify(filter));
        }
        return valid;
    }
    filterIsMustInPresenceOfPredicate() {
        return (fieldObj) => !(fieldObj.predicate != null && fieldObj.filter == null);
    }
    static optionalNonEmptyString(str) {
        // TODO extract to generic utils or use something like lodash
        return str == null || str.length > 0;
    }
    static shouldBeKnownOption(option) {
        // TODO can be be extracted as a generic function
        return option == null || option == Optionality.Required || option == Optionality.Preferred;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRzVkIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvdmFsaWRhdGlvbi9idW5kbGVycy9maWVsZHNWQi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxJQUFJLEVBQUUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBd0MsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFLekYsT0FBTyxnQkFBZ0IsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCw2REFBNkQ7QUFDN0QsYUFBYTtBQUNiLE9BQU8sZ0JBQWdCLE1BQU0sd0JBQXdCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFeEQsTUFBTSxPQUFPLFFBQVMsU0FBUSxpQkFBd0M7SUFDbkQseUJBQXlCLEdBQUcscUVBQXFFLENBQUM7SUFDbEcsK0JBQStCLEdBQUcsNkRBQTZELENBQUM7SUFDaEcsOEJBQThCLEdBQUcsMERBQTBELENBQUM7SUFDNUYsb0NBQW9DLEdBQUcsc0VBQXNFLENBQUM7SUFDOUcsdUNBQXVDLEdBQUcsb0VBQW9FLENBQUM7SUFDL0csaUNBQWlDLEdBQUcsc0NBQXNDLENBQUM7SUFDM0Usc0JBQXNCLEdBQUcsNEJBQTRCLENBQUM7SUFFdkUsWUFBWSxTQUFpQjtRQUMzQixLQUFLLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxjQUFjLENBQUMsTUFBNkI7UUFDakQsSUFBSSxXQUFXLEdBQW9DLEVBQUUsQ0FBQztRQUN0RCxJQUFJLE1BQU0sRUFBRTtZQUNWLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUNsRCxXQUFXLEdBQUcsQ0FBQyxHQUFHLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FB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